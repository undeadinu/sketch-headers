{
  "imports": [
    "NSMenuDelegate.h"
  ],
  "classes": [
    "NSMutableArray",
    "NSMutableDictionary",
    "NSNavView",
    "NSString"
  ],
  "protocol": false,
  "className": "NSNavNodePopUpButton",
  "extends": "NSPopUpButton",
  "interfaces": [
    "NSMenuDelegate"
  ],
  "methods": {
    "drawRect:": {
      "name": "drawRect:",
      "bridgedName": "drawRect",
      "args": [
        {
          "type": "struct CGRect"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_updateFirstItemIfNecessary": {
      "name": "_updateFirstItemIfNecessary",
      "bridgedName": "_updateFirstItemIfNecessary",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_setContentsDirty:": {
      "name": "_setContentsDirty:",
      "bridgedName": "_setContentsDirty",
      "args": [
        {
          "type": "BOOL"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "doneTrackingMenu:": {
      "name": "doneTrackingMenu:",
      "bridgedName": "doneTrackingMenu",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "willPopUpNotification:": {
      "name": "willPopUpNotification:",
      "bridgedName": "willPopUpNotification",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "menuHasKeyEquivalent:forEvent:target:action:": {
      "name": "menuHasKeyEquivalent:forEvent:target:action:",
      "bridgedName": "menuHasKeyEquivalent_forEvent_target_action",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id"
        },
        {
          "type": "id *"
        },
        {
          "type": "SEL *"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "menuNeedsUpdate:": {
      "name": "menuNeedsUpdate:",
      "bridgedName": "menuNeedsUpdate",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_keyEquivalentsAreActive": {
      "name": "_keyEquivalentsAreActive",
      "bridgedName": "_keyEquivalentsAreActive",
      "args": [],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_loadMenuItemIconsIfNecessary": {
      "name": "_loadMenuItemIconsIfNecessary",
      "bridgedName": "_loadMenuItemIconsIfNecessary",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_loadIconlessMenuContentsIfNecessary": {
      "name": "_loadIconlessMenuContentsIfNecessary",
      "bridgedName": "_loadIconlessMenuContentsIfNecessary",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_appendNodes:forNodeInfo:addSeparator:shouldFilter:": {
      "name": "_appendNodes:forNodeInfo:addSeparator:shouldFilter:",
      "bridgedName": "_appendNodes_forNodeInfo_addSeparator_shouldFilter",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id"
        },
        {
          "type": "BOOL"
        },
        {
          "type": "BOOL"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_nodesToDisplayForNodeInfo:": {
      "name": "_nodesToDisplayForNodeInfo:",
      "bridgedName": "_nodesToDisplayForNodeInfo",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_popUpItemAction:": {
      "name": "_popUpItemAction:",
      "bridgedName": "_popUpItemAction",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_newIconlessMenuItemForNavNode:": {
      "name": "_newIconlessMenuItemForNavNode:",
      "bridgedName": "_newIconlessMenuItemForNavNode",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_keyEquivalentForNode:": {
      "name": "_keyEquivalentForNode:",
      "bridgedName": "_keyEquivalentForNode",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_updateMenuItemIcon:": {
      "name": "_updateMenuItemIcon:",
      "bridgedName": "_updateMenuItemIcon",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_lastItemIsNonSeparator": {
      "name": "_lastItemIsNonSeparator",
      "bridgedName": "_lastItemIsNonSeparator",
      "args": [],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "selectedNavNode": {
      "name": "selectedNavNode",
      "bridgedName": "selectedNavNode",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "replaceNodeWithIdentifier:withDataFromDelegate:": {
      "name": "replaceNodeWithIdentifier:withDataFromDelegate:",
      "bridgedName": "replaceNodeWithIdentifier_withDataFromDelegate",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "replaceNodeWithIdentifier:withNode:": {
      "name": "replaceNodeWithIdentifier:withNode:",
      "bridgedName": "replaceNodeWithIdentifier_withNode",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "observeValueForKeyPath:ofObject:change:context:": {
      "name": "observeValueForKeyPath:ofObject:change:context:",
      "bridgedName": "observeValueForKeyPath_ofObject_change_context",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id"
        },
        {
          "type": "id"
        },
        {
          "type": "void *"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "appendDisplayedNode:identifier:title:displaysChildren:": {
      "name": "appendDisplayedNode:identifier:title:displaysChildren:",
      "bridgedName": "appendDisplayedNode_identifier_title_displaysChildren",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id"
        },
        {
          "type": "id"
        },
        {
          "type": "BOOL"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_setContentsDirtyForNodeWithIdentifier:": {
      "name": "_setContentsDirtyForNodeWithIdentifier:",
      "bridgedName": "_setContentsDirtyForNodeWithIdentifier",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "windowOrderedIn": {
      "name": "windowOrderedIn",
      "bridgedName": "windowOrderedIn",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "windowOrderedOut": {
      "name": "windowOrderedOut",
      "bridgedName": "windowOrderedOut",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_stopObservingChildrenAndRemoveAll": {
      "name": "_stopObservingChildrenAndRemoveAll",
      "bridgedName": "_stopObservingChildrenAndRemoveAll",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "configureForRegularMode": {
      "name": "configureForRegularMode",
      "bridgedName": "configureForRegularMode",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "configureForCollapsedMode": {
      "name": "configureForCollapsedMode",
      "bridgedName": "configureForCollapsedMode",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "update": {
      "name": "update",
      "bridgedName": "update",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "dealloc": {
      "name": "dealloc",
      "bridgedName": "dealloc",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "initWithCoder:": {
      "name": "initWithCoder:",
      "bridgedName": "initWithCoder",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "initWithFrame:": {
      "name": "initWithFrame:",
      "bridgedName": "initWithFrame",
      "args": [
        {
          "type": "struct CGRect"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_commonInitNavNodePopUpButton": {
      "name": "_commonInitNavNodePopUpButton",
      "bridgedName": "_commonInitNavNodePopUpButton",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    }
  },
  "properties": {
    "debugDescription": {
      "name": "debugDescription",
      "pointer": true,
      "type": "NSString",
      "attributes": [
        "readonly",
        "copy"
      ]
    },
    "description": {
      "name": "description",
      "pointer": true,
      "type": "NSString",
      "attributes": [
        "readonly",
        "copy"
      ]
    },
    "hash": {
      "name": "hash",
      "pointer": false,
      "type": "unsigned long long",
      "attributes": [
        "readonly"
      ]
    },
    "superclass": {
      "name": "superclass",
      "pointer": false,
      "type": "Class",
      "attributes": [
        "readonly"
      ]
    }
  }
}