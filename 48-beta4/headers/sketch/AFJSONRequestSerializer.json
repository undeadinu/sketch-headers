{
  "imports": [
    "AFHTTPRequestSerializer.h"
  ],
  "classes": [],
  "protocol": false,
  "className": "AFJSONRequestSerializer",
  "extends": "AFHTTPRequestSerializer",
  "interfaces": [],
  "methods": {
    "serializerWithWritingOptions:": {
      "name": "serializerWithWritingOptions:",
      "bridgedName": "serializerWithWritingOptions",
      "args": [
        {
          "type": "unsigned long long"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "serializer": {
      "name": "serializer",
      "bridgedName": "serializer",
      "args": [],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "copyWithZone:": {
      "name": "copyWithZone:",
      "bridgedName": "copyWithZone",
      "args": [
        {
          "type": "struct _NSZone *"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "encodeWithCoder:": {
      "name": "encodeWithCoder:",
      "bridgedName": "encodeWithCoder",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "initWithCoder:": {
      "name": "initWithCoder:",
      "bridgedName": "initWithCoder",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "requestBySerializingRequest:withParameters:error:": {
      "name": "requestBySerializingRequest:withParameters:error:",
      "bridgedName": "requestBySerializingRequest_withParameters_error",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id"
        },
        {
          "type": "id *"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    }
  },
  "properties": {
    "writingOptions": {
      "name": "writingOptions",
      "pointer": false,
      "type": "unsigned long long",
      "attributes": [
        "nonatomic"
      ]
    }
  }
}