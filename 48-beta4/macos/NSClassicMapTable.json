{
  "imports": [],
  "classes": [],
  "protocol": false,
  "className": "NSClassicMapTable",
  "extends": "NSMapTable",
  "interfaces": [],
  "methods": {
    "getKeys:values:": {
      "name": "getKeys:values:",
      "bridgedName": "getKeys_values",
      "args": [
        {
          "type": "const void **"
        },
        {
          "type": "const void **"
        }
      ],
      "returns": "unsigned long long",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "allValues": {
      "name": "allValues",
      "bridgedName": "allValues",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "allKeys": {
      "name": "allKeys",
      "bridgedName": "allKeys",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "description": {
      "name": "description",
      "bridgedName": "description",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "count": {
      "name": "count",
      "bridgedName": "count",
      "args": [],
      "returns": "unsigned long long",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "removeObjectForKey:": {
      "name": "removeObjectForKey:",
      "bridgedName": "removeObjectForKey",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "existingItemForSetItem:forAbsentKey:": {
      "name": "existingItemForSetItem:forAbsentKey:",
      "bridgedName": "existingItemForSetItem_forAbsentKey",
      "args": [
        {
          "type": "const void *"
        },
        {
          "type": "const void *"
        }
      ],
      "returns": "void *",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "setItem:forKnownAbsentKey:": {
      "name": "setItem:forKnownAbsentKey:",
      "bridgedName": "setItem_forKnownAbsentKey",
      "args": [
        {
          "type": "const void *"
        },
        {
          "type": "const void *"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "setObject:forKey:": {
      "name": "setObject:forKey:",
      "bridgedName": "setObject_forKey",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "objectForKey:": {
      "name": "objectForKey:",
      "bridgedName": "objectForKey",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "mapMember:originalKey:value:": {
      "name": "mapMember:originalKey:value:",
      "bridgedName": "mapMember_originalKey_value",
      "args": [
        {
          "type": "const void *"
        },
        {
          "type": "const void **"
        },
        {
          "type": "const void **"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "copy": {
      "name": "copy",
      "bridgedName": "copy",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "isEqual:": {
      "name": "isEqual:",
      "bridgedName": "isEqual",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "removeAllItems": {
      "name": "removeAllItems",
      "bridgedName": "removeAllItems",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "dealloc": {
      "name": "dealloc",
      "bridgedName": "dealloc",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "init": {
      "name": "init",
      "bridgedName": "init",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    }
  },
  "properties": {}
}