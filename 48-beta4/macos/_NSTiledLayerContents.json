{
  "imports": [
    "NSObject.h",
    "CALayerDelegate.h"
  ],
  "classes": [
    "NSMutableDictionary",
    "NSRecursiveLock",
    "NSRegion",
    "NSString",
    "_NSTiledLayer"
  ],
  "protocol": false,
  "className": "_NSTiledLayerContents",
  "extends": "NSObject",
  "interfaces": [
    "CALayerDelegate"
  ],
  "methods": {
    ".cxx_destruct": {
      "name": ".cxx_destruct",
      "bridgedName": ".cxx_destruct",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "CA_copyRenderValue": {
      "name": "CA_copyRenderValue",
      "bridgedName": "CA_copyRenderValue",
      "args": [],
      "returns": "void *",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "CA_prepareRenderValue": {
      "name": "CA_prepareRenderValue",
      "bridgedName": "CA_prepareRenderValue",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "actionForLayer:forKey:": {
      "name": "actionForLayer:forKey:",
      "bridgedName": "actionForLayer_forKey",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "drawLayer:inContext:": {
      "name": "drawLayer:inContext:",
      "bridgedName": "drawLayer_inContext",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "struct CGContext *"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "NS_canDrawLayer:": {
      "name": "NS_canDrawLayer:",
      "bridgedName": "NS_canDrawLayer",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "updateContentsScaleSize:": {
      "name": "updateContentsScaleSize:",
      "bridgedName": "updateContentsScaleSize",
      "args": [
        {
          "type": "struct CGSize"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "updateContentsScale:": {
      "name": "updateContentsScale:",
      "bridgedName": "updateContentsScale",
      "args": [
        {
          "type": "double"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "update:shouldCallPrepareContent:": {
      "name": "update:shouldCallPrepareContent:",
      "bridgedName": "update_shouldCallPrepareContent",
      "args": [
        {
          "type": "BOOL"
        },
        {
          "type": "BOOL"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "invalidateRect:": {
      "name": "invalidateRect:",
      "bridgedName": "invalidateRect",
      "args": [
        {
          "type": "struct CGRect"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "prefetchContentsInRect:scrollVelocity:": {
      "name": "prefetchContentsInRect:scrollVelocity:",
      "bridgedName": "prefetchContentsInRect_scrollVelocity",
      "args": [
        {
          "type": "struct CGRect"
        },
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "renderedRectInRect:scrollVelocity:": {
      "name": "renderedRectInRect:scrollVelocity:",
      "bridgedName": "renderedRectInRect_scrollVelocity",
      "args": [
        {
          "type": "struct CGRect"
        },
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "struct CGRect",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_findRenderedRectStartingAtRect:scrollVelocity:": {
      "name": "_findRenderedRectStartingAtRect:scrollVelocity:",
      "bridgedName": "_findRenderedRectStartingAtRect_scrollVelocity",
      "args": [
        {
          "type": "struct CGRect"
        },
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "struct CGRect",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_findFirstValidRectStartingAtRect:scrollVelocity:": {
      "name": "_findFirstValidRectStartingAtRect:scrollVelocity:",
      "bridgedName": "_findFirstValidRectStartingAtRect_scrollVelocity",
      "args": [
        {
          "type": "struct CGRect"
        },
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "struct CGRect",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "setPreparedContentRect:": {
      "name": "setPreparedContentRect:",
      "bridgedName": "setPreparedContentRect",
      "args": [
        {
          "type": "struct CGRect"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "addAllTilesWithNonPurgedContents": {
      "name": "addAllTilesWithNonPurgedContents",
      "bridgedName": "addAllTilesWithNonPurgedContents",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "purgeExcessTileContents": {
      "name": "purgeExcessTileContents",
      "bridgedName": "purgeExcessTileContents",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_removeNonVisibleTiles": {
      "name": "_removeNonVisibleTiles",
      "bridgedName": "_removeNonVisibleTiles",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_performWorkOnTilesOutwardFromRect:scrollVelocity:handler:": {
      "name": "_performWorkOnTilesOutwardFromRect:scrollVelocity:handler:",
      "bridgedName": "_performWorkOnTilesOutwardFromRect_scrollVelocity_handler",
      "args": [
        {
          "type": "struct CGRect"
        },
        {
          "type": "struct CGPoint"
        },
        {
          "type": "CDUnknownBlockType"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_performWorkOnTilesFromVisibleAreaOutward:scrollVelocity:": {
      "name": "_performWorkOnTilesFromVisibleAreaOutward:scrollVelocity:",
      "bridgedName": "_performWorkOnTilesFromVisibleAreaOutward_scrollVelocity",
      "args": [
        {
          "type": "CDUnknownBlockType"
        },
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "dealloc": {
      "name": "dealloc",
      "bridgedName": "dealloc",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "init": {
      "name": "init",
      "bridgedName": "init",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    }
  },
  "properties": {
    "presentationRect": {
      "name": "presentationRect",
      "pointer": false,
      "type": "struct CGRect",
      "attributes": [
        "readonly"
      ]
    },
    "tileSize": {
      "name": "tileSize",
      "pointer": false,
      "type": "struct CGSize",
      "attributes": [
        "readonly"
      ]
    },
    "coverageRect": {
      "name": "coverageRect",
      "pointer": false,
      "type": "struct CGRect",
      "attributes": [
        "readonly"
      ]
    },
    "activeRect": {
      "name": "activeRect",
      "pointer": false,
      "type": "struct CGRect",
      "attributes": [
        "readonly"
      ]
    },
    "debugDescription": {
      "name": "debugDescription",
      "pointer": true,
      "type": "NSString",
      "attributes": [
        "readonly",
        "copy"
      ]
    },
    "description": {
      "name": "description",
      "pointer": true,
      "type": "NSString",
      "attributes": [
        "readonly",
        "copy"
      ]
    },
    "hash": {
      "name": "hash",
      "pointer": false,
      "type": "unsigned long long",
      "attributes": [
        "readonly"
      ]
    },
    "superclass": {
      "name": "superclass",
      "pointer": false,
      "type": "Class",
      "attributes": [
        "readonly"
      ]
    }
  }
}