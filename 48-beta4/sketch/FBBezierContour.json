{
  "imports": [
    "NSObject.h",
    "NSCopying.h"
  ],
  "classes": [
    "NSArray",
    "NSBezierPath",
    "NSMutableArray",
    "NSNumber"
  ],
  "protocol": false,
  "className": "FBBezierContour",
  "extends": "NSObject",
  "interfaces": [
    "NSCopying"
  ],
  "methods": {
    "bezierContourWithCurve:": {
      "name": "bezierContourWithCurve:",
      "bridgedName": "bezierContourWithCurve",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    ".cxx_destruct": {
      "name": ".cxx_destruct",
      "bridgedName": ".cxx_destruct",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "debugQuickLookObject": {
      "name": "debugQuickLookObject",
      "bridgedName": "debugQuickLookObject",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "debugDrawColor:scale:": {
      "name": "debugDrawColor:scale:",
      "bridgedName": "debugDrawColor_scale",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "double"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "contourByMergingLinearRuns": {
      "name": "contourByMergingLinearRuns",
      "bridgedName": "contourByMergingLinearRuns",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "firstNonPoint": {
      "name": "firstNonPoint",
      "bridgedName": "firstNonPoint",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "debugPathForWindingRuleContainmentAtEdge:parameter:point:withTransform:andSizeTransform:": {
      "name": "debugPathForWindingRuleContainmentAtEdge:parameter:point:withTransform:andSizeTransform:",
      "bridgedName": "debugPathForWindingRuleContainmentAtEdge_parameter_point_withTransform_andSizeTransform",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "double"
        },
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGAffineTransform"
        },
        {
          "type": "struct CGAffineTransform"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "debugPathForWindingRuleContainmentWithTransform:andSizeTransform:": {
      "name": "debugPathForWindingRuleContainmentWithTransform:andSizeTransform:",
      "bridgedName": "debugPathForWindingRuleContainmentWithTransform_andSizeTransform",
      "args": [
        {
          "type": "struct CGAffineTransform"
        },
        {
          "type": "struct CGAffineTransform"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "debugPathForJointsWithTransform:andSizeTransform:": {
      "name": "debugPathForJointsWithTransform:andSizeTransform:",
      "bridgedName": "debugPathForJointsWithTransform_andSizeTransform",
      "args": [
        {
          "type": "struct CGAffineTransform"
        },
        {
          "type": "struct CGAffineTransform"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "debugPathForIntersectionType:withTransform:andSizeTransform:": {
      "name": "debugPathForIntersectionType:withTransform:andSizeTransform:",
      "bridgedName": "debugPathForIntersectionType_withTransform_andSizeTransform",
      "args": [
        {
          "type": "long long"
        },
        {
          "type": "struct CGAffineTransform"
        },
        {
          "type": "struct CGAffineTransform"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "description": {
      "name": "description",
      "bridgedName": "description",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "closestLocationToPoint:": {
      "name": "closestLocationToPoint:",
      "bridgedName": "closestLocationToPoint",
      "args": [
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "clone": {
      "name": "clone",
      "bridgedName": "clone",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "copyWithZone:": {
      "name": "copyWithZone:",
      "bridgedName": "copyWithZone",
      "args": [
        {
          "type": "struct _NSZone *"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "doesOverlapContainParameter:onEdge:": {
      "name": "doesOverlapContainParameter:onEdge:",
      "bridgedName": "doesOverlapContainParameter_onEdge",
      "args": [
        {
          "type": "double"
        },
        {
          "type": "id"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "doesOverlapContainCrossing:": {
      "name": "doesOverlapContainCrossing:",
      "bridgedName": "doesOverlapContainCrossing",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "forEachEdgeOverlapDo:": {
      "name": "forEachEdgeOverlapDo:",
      "bridgedName": "forEachEdgeOverlapDo",
      "args": [
        {
          "type": "CDUnknownBlockType"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "isEquivalent:": {
      "name": "isEquivalent:",
      "bridgedName": "isEquivalent",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "removeAllOverlaps": {
      "name": "removeAllOverlaps",
      "bridgedName": "removeAllOverlaps",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "addOverlap:": {
      "name": "addOverlap:",
      "bridgedName": "addOverlap",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "addSelfIntersectingContoursToArray:originalContour:": {
      "name": "addSelfIntersectingContoursToArray:originalContour:",
      "bridgedName": "addSelfIntersectingContoursToArray_originalContour",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "debugPathForContainmentOfCrossing:transform:": {
      "name": "debugPathForContainmentOfCrossing:transform:",
      "bridgedName": "debugPathForContainmentOfCrossing_transform",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "struct CGAffineTransform"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "containsCrossingUsingNonZeroWindingRule:": {
      "name": "containsCrossingUsingNonZeroWindingRule:",
      "bridgedName": "containsCrossingUsingNonZeroWindingRule",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "adjustWindingCount:forIntersection:testRay:": {
      "name": "adjustWindingCount:forIntersection:testRay:",
      "bridgedName": "adjustWindingCount_forIntersection_testRay",
      "args": [
        {
          "type": "long long"
        },
        {
          "type": "id"
        },
        {
          "type": "id"
        }
      ],
      "returns": "long long",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "crossingContainmentRay:": {
      "name": "crossingContainmentRay:",
      "bridgedName": "crossingContainmentRay",
      "args": [
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "intersection:isReallyTheSameAs:": {
      "name": "intersection:isReallyTheSameAs:",
      "bridgedName": "intersection_isReallyTheSameAs",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "containsPointUsingNonZeroWindingRule:": {
      "name": "containsPointUsingNonZeroWindingRule:",
      "bridgedName": "containsPointUsingNonZeroWindingRule",
      "args": [
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "containsUsingNonZeroWindingRulePoint:onEdge:atParameter:": {
      "name": "containsUsingNonZeroWindingRulePoint:onEdge:atParameter:",
      "bridgedName": "containsUsingNonZeroWindingRulePoint_onEdge_atParameter",
      "args": [
        {
          "type": "struct CGPoint"
        },
        {
          "type": "id"
        },
        {
          "type": "double"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "intersection:isReallyTheSameAsCurve:atParameter:": {
      "name": "intersection:isReallyTheSameAsCurve:atParameter:",
      "bridgedName": "intersection_isReallyTheSameAsCurve_atParameter",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id"
        },
        {
          "type": "double"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "adjustWindingCount:onEdge:atParameter:": {
      "name": "adjustWindingCount:onEdge:atParameter:",
      "bridgedName": "adjustWindingCount_onEdge_atParameter",
      "args": [
        {
          "type": "long long"
        },
        {
          "type": "id"
        },
        {
          "type": "double"
        }
      ],
      "returns": "long long",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "isInflectionPointOnEdge:atParameter:": {
      "name": "isInflectionPointOnEdge:atParameter:",
      "bridgedName": "isInflectionPointOnEdge_atParameter",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "double"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "markSelfCrossingsOnEdge:startParameter:stopParameter:isEntry:withBlock:": {
      "name": "markSelfCrossingsOnEdge:startParameter:stopParameter:isEntry:withBlock:",
      "bridgedName": "markSelfCrossingsOnEdge_startParameter_stopParameter_isEntry_withBlock",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "double"
        },
        {
          "type": "double"
        },
        {
          "type": "BOOL"
        },
        {
          "type": "CDUnknownBlockType"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "markSelfCrossingsAsEntryOrExit": {
      "name": "markSelfCrossingsAsEntryOrExit",
      "bridgedName": "markSelfCrossingsAsEntryOrExit",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "sortCoincidentCrossings": {
      "name": "sortCoincidentCrossings",
      "bridgedName": "sortCoincidentCrossings",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "allCrossingsWithGroupedCoincidentPairs": {
      "name": "allCrossingsWithGroupedCoincidentPairs",
      "bridgedName": "allCrossingsWithGroupedCoincidentPairs",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "isCrossing:betweenStartEdge:parameter:andCrossing:": {
      "name": "isCrossing:betweenStartEdge:parameter:andCrossing:",
      "bridgedName": "isCrossing_betweenStartEdge_parameter_andCrossing",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id"
        },
        {
          "type": "double"
        },
        {
          "type": "id"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "crossesOwnContour:": {
      "name": "crossesOwnContour:",
      "bridgedName": "crossesOwnContour",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "contourMadeClockwiseIfNecessary": {
      "name": "contourMadeClockwiseIfNecessary",
      "bridgedName": "contourMadeClockwiseIfNecessary",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "contourWithTransform:": {
      "name": "contourWithTransform:",
      "bridgedName": "contourWithTransform",
      "args": [
        {
          "type": "struct CGAffineTransform"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "reversedContour": {
      "name": "reversedContour",
      "bridgedName": "reversedContour",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "close": {
      "name": "close",
      "bridgedName": "close",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "bezierPathFromEdge:toEdge:": {
      "name": "bezierPathFromEdge:toEdge:",
      "bridgedName": "bezierPathFromEdge_toEdge",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "bezierPath": {
      "name": "bezierPath",
      "bridgedName": "bezierPath",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "contourAndSelfIntersectingContoursContainPoint:": {
      "name": "contourAndSelfIntersectingContoursContainPoint:",
      "bridgedName": "contourAndSelfIntersectingContoursContainPoint",
      "args": [
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "markCrossingsOnEdge:startParameter:stopParameter:otherContours:isEntry:": {
      "name": "markCrossingsOnEdge:startParameter:stopParameter:otherContours:isEntry:",
      "bridgedName": "markCrossingsOnEdge_startParameter_stopParameter_otherContours_isEntry",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "double"
        },
        {
          "type": "double"
        },
        {
          "type": "id"
        },
        {
          "type": "BOOL"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "markCrossingsAsEntryOrExitWithContour:markInside:": {
      "name": "markCrossingsAsEntryOrExitWithContour:markInside:",
      "bridgedName": "markCrossingsAsEntryOrExitWithContour_markInside",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "BOOL"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "startingEdge:parameter:point:skipHorizontals:skipInflectionPoints:": {
      "name": "startingEdge:parameter:point:skipHorizontals:skipInflectionPoints:",
      "bridgedName": "startingEdge_parameter_point_skipHorizontals_skipInflectionPoints",
      "args": [
        {
          "type": "id *"
        },
        {
          "type": "double *"
        },
        {
          "type": "struct CGPoint *"
        },
        {
          "type": "BOOL"
        },
        {
          "type": "BOOL"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "testRayForContainment:": {
      "name": "testRayForContainment:",
      "bridgedName": "testRayForContainment",
      "args": [
        {
          "type": "struct CGRect"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "startEdgeSkipHorizontals:skipInflectionPoints:": {
      "name": "startEdgeSkipHorizontals:skipInflectionPoints:",
      "bridgedName": "startEdgeSkipHorizontals_skipInflectionPoints",
      "args": [
        {
          "type": "BOOL"
        },
        {
          "type": "BOOL"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "startEdge": {
      "name": "startEdge",
      "bridgedName": "startEdge",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "intersectionsWithRay:withBlock:": {
      "name": "intersectionsWithRay:withBlock:",
      "bridgedName": "intersectionsWithRay_withBlock",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "CDUnknownBlockType"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "numberOfIntersectionsWithRay:": {
      "name": "numberOfIntersectionsWithRay:",
      "bridgedName": "numberOfIntersectionsWithRay",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "unsigned long long",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "containsPoint:": {
      "name": "containsPoint:",
      "bridgedName": "containsPoint",
      "args": [
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "addReverseCurveFrom:to:": {
      "name": "addReverseCurveFrom:to:",
      "bridgedName": "addReverseCurveFrom_to",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "addReverseCurve:": {
      "name": "addReverseCurve:",
      "bridgedName": "addReverseCurve",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "addCurveFrom:to:": {
      "name": "addCurveFrom:to:",
      "bridgedName": "addCurveFrom_to",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "addCurve:": {
      "name": "addCurve:",
      "bridgedName": "addCurve",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "dealloc": {
      "name": "dealloc",
      "bridgedName": "dealloc",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "init": {
      "name": "init",
      "bridgedName": "init",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    }
  },
  "properties": {
    "inside": {
      "name": "inside",
      "pointer": false,
      "type": "int",
      "attributes": [
        "nonatomic"
      ]
    },
    "edges": {
      "name": "edges",
      "pointer": true,
      "type": "NSArray",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "selfIntersectingContours": {
      "name": "selfIntersectingContours",
      "pointer": true,
      "type": "__weak NSArray",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "intersectingContours": {
      "name": "intersectingContours",
      "pointer": true,
      "type": "__weak NSArray",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "direction": {
      "name": "direction",
      "pointer": false,
      "type": "int",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "cachedDirection": {
      "name": "cachedDirection",
      "pointer": true,
      "type": "NSNumber",
      "attributes": [
        "retain",
        "nonatomic"
      ]
    },
    "isClosed": {
      "name": "isClosed",
      "pointer": false,
      "type": "BOOL",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "CGPath": {
      "name": "CGPath",
      "pointer": true,
      "type": "struct CGPath",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "isEmpty": {
      "name": "isEmpty",
      "pointer": false,
      "type": "BOOL",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "firstPoint": {
      "name": "firstPoint",
      "pointer": false,
      "type": "struct CGPoint",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "boundingRect": {
      "name": "boundingRect",
      "pointer": false,
      "type": "struct CGRect",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "bounds": {
      "name": "bounds",
      "pointer": false,
      "type": "struct CGRect",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "nonPointEdges": {
      "name": "nonPointEdges",
      "pointer": true,
      "type": "NSArray",
      "attributes": [
        "readonly",
        "copy",
        "nonatomic"
      ]
    },
    "crossings": {
      "name": "crossings",
      "pointer": true,
      "type": "NSArray",
      "attributes": [
        "readonly",
        "copy",
        "nonatomic"
      ]
    },
    "overlaps_": {
      "name": "overlaps_",
      "pointer": true,
      "type": "__weak NSMutableArray",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "overlaps": {
      "name": "overlaps",
      "pointer": true,
      "type": "NSArray",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    }
  }
}