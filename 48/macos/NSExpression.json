{
  "imports": [
    "NSObject.h",
    "NSCopying.h",
    "NSSecureCoding.h"
  ],
  "classes": [
    "NSArray",
    "NSPredicate",
    "NSString"
  ],
  "protocol": false,
  "className": "NSExpression",
  "extends": "NSObject",
  "interfaces": [
    "NSSecureCoding",
    "NSCopying"
  ],
  "methods": {
    "supportsSecureCoding": {
      "name": "supportsSecureCoding",
      "bridgedName": "supportsSecureCoding",
      "args": [],
      "returns": "BOOL",
      "kind": "class",
      "kindIndicator": "+"
    },
    "expressionForAnyKey": {
      "name": "expressionForAnyKey",
      "bridgedName": "expressionForAnyKey",
      "args": [],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "expressionForBlock:arguments:": {
      "name": "expressionForBlock:arguments:",
      "bridgedName": "expressionForBlock_arguments",
      "args": [
        {
          "name": "expressionForBlock",
          "type": "CDUnknownBlockType"
        },
        {
          "name": "arguments",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "expressionForMinusSet:with:": {
      "name": "expressionForMinusSet:with:",
      "bridgedName": "expressionForMinusSet_with",
      "args": [
        {
          "name": "expressionForMinusSet",
          "type": "id"
        },
        {
          "name": "with",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "expressionForIntersectSet:with:": {
      "name": "expressionForIntersectSet:with:",
      "bridgedName": "expressionForIntersectSet_with",
      "args": [
        {
          "name": "expressionForIntersectSet",
          "type": "id"
        },
        {
          "name": "with",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "expressionForUnionSet:with:": {
      "name": "expressionForUnionSet:with:",
      "bridgedName": "expressionForUnionSet_with",
      "args": [
        {
          "name": "expressionForUnionSet",
          "type": "id"
        },
        {
          "name": "with",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "expressionForFunction:arguments:": {
      "name": "expressionForFunction:arguments:",
      "bridgedName": "expressionForFunction_arguments",
      "args": [
        {
          "name": "expressionForFunction",
          "type": "id"
        },
        {
          "name": "arguments",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "expressionForKeyPath:": {
      "name": "expressionForKeyPath:",
      "bridgedName": "expressionForKeyPath",
      "args": [
        {
          "name": "expressionForKeyPath",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "_newKeyPathExpressionForString:": {
      "name": "_newKeyPathExpressionForString:",
      "bridgedName": "_newKeyPathExpressionForString",
      "args": [
        {
          "name": "_newKeyPathExpressionForString",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "expressionForConditional:trueExpression:falseExpression:": {
      "name": "expressionForConditional:trueExpression:falseExpression:",
      "bridgedName": "expressionForConditional_trueExpression_falseExpression",
      "args": [
        {
          "name": "expressionForConditional",
          "type": "id"
        },
        {
          "name": "trueExpression",
          "type": "id"
        },
        {
          "name": "falseExpression",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "expressionForTernaryWithPredicate:trueExpression:falseExpression:": {
      "name": "expressionForTernaryWithPredicate:trueExpression:falseExpression:",
      "bridgedName": "expressionForTernaryWithPredicate_trueExpression_falseExpression",
      "args": [
        {
          "name": "expressionForTernaryWithPredicate",
          "type": "id"
        },
        {
          "name": "trueExpression",
          "type": "id"
        },
        {
          "name": "falseExpression",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "expressionForVariableNameAssignment:expression:": {
      "name": "expressionForVariableNameAssignment:expression:",
      "bridgedName": "expressionForVariableNameAssignment_expression",
      "args": [
        {
          "name": "expressionForVariableNameAssignment",
          "type": "id"
        },
        {
          "name": "expression",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "expressionForFunction:selectorName:arguments:": {
      "name": "expressionForFunction:selectorName:arguments:",
      "bridgedName": "expressionForFunction_selectorName_arguments",
      "args": [
        {
          "name": "expressionForFunction",
          "type": "id"
        },
        {
          "name": "selectorName",
          "type": "id"
        },
        {
          "name": "arguments",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "expressionForSubquery:usingIteratorVariable:predicate:": {
      "name": "expressionForSubquery:usingIteratorVariable:predicate:",
      "bridgedName": "expressionForSubquery_usingIteratorVariable_predicate",
      "args": [
        {
          "name": "expressionForSubquery",
          "type": "id"
        },
        {
          "name": "usingIteratorVariable",
          "type": "id"
        },
        {
          "name": "predicate",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "expressionForAggregate:": {
      "name": "expressionForAggregate:",
      "bridgedName": "expressionForAggregate",
      "args": [
        {
          "name": "expressionForAggregate",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "expressionForSymbolicString:": {
      "name": "expressionForSymbolicString:",
      "bridgedName": "expressionForSymbolicString",
      "args": [
        {
          "name": "expressionForSymbolicString",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "expressionForVariable:": {
      "name": "expressionForVariable:",
      "bridgedName": "expressionForVariable",
      "args": [
        {
          "name": "expressionForVariable",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "expressionForEvaluatedObject": {
      "name": "expressionForEvaluatedObject",
      "bridgedName": "expressionForEvaluatedObject",
      "args": [],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "expressionForConstantValue:": {
      "name": "expressionForConstantValue:",
      "bridgedName": "expressionForConstantValue",
      "args": [
        {
          "name": "expressionForConstantValue",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "expressionWithFormat:arguments:": {
      "name": "expressionWithFormat:arguments:",
      "bridgedName": "expressionWithFormat_arguments",
      "args": [
        {
          "name": "expressionWithFormat",
          "type": "id"
        },
        {
          "name": "arguments",
          "type": "struct __va_list_tag [1]"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "expressionWithFormat:": {
      "name": "expressionWithFormat:",
      "bridgedName": "expressionWithFormat",
      "args": [
        {
          "name": "expressionWithFormat",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "expressionWithFormat:argumentArray:": {
      "name": "expressionWithFormat:argumentArray:",
      "bridgedName": "expressionWithFormat_argumentArray",
      "args": [
        {
          "name": "expressionWithFormat",
          "type": "id"
        },
        {
          "name": "argumentArray",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "_expressionWithSubstitutionVariables:": {
      "name": "_expressionWithSubstitutionVariables:",
      "bridgedName": "_expressionWithSubstitutionVariables",
      "args": [
        {
          "name": "_expressionWithSubstitutionVariables",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "acceptVisitor:flags:": {
      "name": "acceptVisitor:flags:",
      "bridgedName": "acceptVisitor_flags",
      "args": [
        {
          "name": "acceptVisitor",
          "type": "id"
        },
        {
          "name": "flags",
          "type": "unsigned long long"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_shouldUseParensWithDescription": {
      "name": "_shouldUseParensWithDescription",
      "bridgedName": "_shouldUseParensWithDescription",
      "args": [],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "subexpression": {
      "name": "subexpression",
      "bridgedName": "subexpression",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "selector": {
      "name": "selector",
      "bridgedName": "selector",
      "args": [],
      "returns": "SEL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "predicateFormat": {
      "name": "predicateFormat",
      "bridgedName": "predicateFormat",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "description": {
      "name": "description",
      "bridgedName": "description",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "expressionValueWithObject:context:": {
      "name": "expressionValueWithObject:context:",
      "bridgedName": "expressionValueWithObject_context",
      "args": [
        {
          "name": "expressionValueWithObject",
          "type": "id"
        },
        {
          "name": "context",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "copyWithZone:": {
      "name": "copyWithZone:",
      "bridgedName": "copyWithZone",
      "args": [
        {
          "name": "copyWithZone",
          "type": "struct _NSZone *"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "initWithCoder:": {
      "name": "initWithCoder:",
      "bridgedName": "initWithCoder",
      "args": [
        {
          "name": "initWithCoder",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "encodeWithCoder:": {
      "name": "encodeWithCoder:",
      "bridgedName": "encodeWithCoder",
      "args": [
        {
          "name": "encodeWithCoder",
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "allowEvaluation": {
      "name": "allowEvaluation",
      "bridgedName": "allowEvaluation",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_allowsEvaluation": {
      "name": "_allowsEvaluation",
      "bridgedName": "_allowsEvaluation",
      "args": [],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "initWithExpressionType:": {
      "name": "initWithExpressionType:",
      "bridgedName": "initWithExpressionType",
      "args": [
        {
          "name": "initWithExpressionType",
          "type": "unsigned long long"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    }
  },
  "properties": {
    "expressionBlock": {
      "name": "expressionBlock",
      "pointer": false,
      "type": "CDUnknownBlockType",
      "attributes": [
        "readonly",
        "copy"
      ]
    },
    "falseExpression": {
      "name": "falseExpression",
      "pointer": true,
      "type": "NSExpression",
      "attributes": [
        "readonly",
        "copy"
      ]
    },
    "trueExpression": {
      "name": "trueExpression",
      "pointer": true,
      "type": "NSExpression",
      "attributes": [
        "readonly",
        "copy"
      ]
    },
    "collection": {
      "name": "collection",
      "pointer": false,
      "type": "id",
      "attributes": [
        "readonly",
        "retain"
      ]
    },
    "predicate": {
      "name": "predicate",
      "pointer": true,
      "type": "NSPredicate",
      "attributes": [
        "readonly",
        "copy"
      ]
    },
    "rightExpression": {
      "name": "rightExpression",
      "pointer": true,
      "type": "NSExpression",
      "attributes": [
        "readonly",
        "copy"
      ]
    },
    "leftExpression": {
      "name": "leftExpression",
      "pointer": true,
      "type": "NSExpression",
      "attributes": [
        "readonly",
        "copy"
      ]
    },
    "arguments": {
      "name": "arguments",
      "pointer": true,
      "type": "NSArray",
      "attributes": [
        "readonly",
        "copy"
      ]
    },
    "operand": {
      "name": "operand",
      "pointer": true,
      "type": "NSExpression",
      "attributes": [
        "readonly",
        "copy"
      ]
    },
    "function": {
      "name": "function",
      "pointer": true,
      "type": "NSString",
      "attributes": [
        "readonly",
        "copy"
      ]
    },
    "variable": {
      "name": "variable",
      "pointer": true,
      "type": "NSString",
      "attributes": [
        "readonly",
        "copy"
      ]
    },
    "constantValue": {
      "name": "constantValue",
      "pointer": false,
      "type": "id",
      "attributes": [
        "readonly",
        "retain"
      ]
    },
    "keyPath": {
      "name": "keyPath",
      "pointer": true,
      "type": "NSString",
      "attributes": [
        "readonly",
        "copy"
      ]
    },
    "expressionType": {
      "name": "expressionType",
      "pointer": false,
      "type": "unsigned long long",
      "attributes": [
        "readonly"
      ]
    }
  }
}