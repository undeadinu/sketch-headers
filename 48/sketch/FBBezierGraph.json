{
  "imports": [
    "NSObject.h"
  ],
  "classes": [
    "NSArray",
    "NSMutableArray"
  ],
  "protocol": false,
  "className": "FBBezierGraph",
  "extends": "NSObject",
  "interfaces": [],
  "methods": {
    "bezierGraph": {
      "name": "bezierGraph",
      "bridgedName": "bezierGraph",
      "args": [],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "bezierGraphWithContours:": {
      "name": "bezierGraphWithContours:",
      "bridgedName": "bezierGraphWithContours",
      "args": [
        {
          "name": "bezierGraphWithContours",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "bezierGraphWithBezierPath:": {
      "name": "bezierGraphWithBezierPath:",
      "bridgedName": "bezierGraphWithBezierPath",
      "args": [
        {
          "name": "bezierGraphWithBezierPath",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "bezierGraphWithCGPath:": {
      "name": "bezierGraphWithCGPath:",
      "bridgedName": "bezierGraphWithCGPath",
      "args": [
        {
          "name": "bezierGraphWithCGPath",
          "type": "struct CGPath *"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    ".cxx_destruct": {
      "name": ".cxx_destruct",
      "bridgedName": ".cxx_destruct",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "debugQuickLookObject": {
      "name": "debugQuickLookObject",
      "bridgedName": "debugQuickLookObject",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "bezierGraphBySplittingSelfCrossingContours:": {
      "name": "bezierGraphBySplittingSelfCrossingContours:",
      "bridgedName": "bezierGraphBySplittingSelfCrossingContours",
      "args": [
        {
          "name": "bezierGraphBySplittingSelfCrossingContours",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "bezierGraphByTrimmingSelfCrossingContours": {
      "name": "bezierGraphByTrimmingSelfCrossingContours",
      "bridgedName": "bezierGraphByTrimmingSelfCrossingContours",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "bezierGraphByMergingLinearRunsInContours": {
      "name": "bezierGraphByMergingLinearRunsInContours",
      "bridgedName": "bezierGraphByMergingLinearRunsInContours",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "contoursWithoutCrossings": {
      "name": "contoursWithoutCrossings",
      "bridgedName": "contoursWithoutCrossings",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "contourHasCrossings:": {
      "name": "contourHasCrossings:",
      "bridgedName": "contourHasCrossings",
      "args": [
        {
          "name": "contourHasCrossings",
          "type": "id"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "contourFromCurves:": {
      "name": "contourFromCurves:",
      "bridgedName": "contourFromCurves",
      "args": [
        {
          "name": "contourFromCurves",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "nextCrossingFromCrossing:curves:": {
      "name": "nextCrossingFromCrossing:curves:",
      "bridgedName": "nextCrossingFromCrossing_curves",
      "args": [
        {
          "name": "nextCrossingFromCrossing",
          "type": "id"
        },
        {
          "name": "curves",
          "type": "id *"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "curveFromCrossing:to:": {
      "name": "curveFromCrossing:to:",
      "bridgedName": "curveFromCrossing_to",
      "args": [
        {
          "name": "curveFromCrossing",
          "type": "id"
        },
        {
          "name": "to",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "bezierGraphWithTransform:": {
      "name": "bezierGraphWithTransform:",
      "bridgedName": "bezierGraphWithTransform",
      "args": [
        {
          "name": "bezierGraphWithTransform",
          "type": "struct CGAffineTransform"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "description": {
      "name": "description",
      "bridgedName": "description",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "debugFindCurvesThatShouldIntersectWith:withBlock:": {
      "name": "debugFindCurvesThatShouldIntersectWith:withBlock:",
      "bridgedName": "debugFindCurvesThatShouldIntersectWith_withBlock",
      "args": [
        {
          "name": "debugFindCurvesThatShouldIntersectWith",
          "type": "id"
        },
        {
          "name": "withBlock",
          "type": "CDUnknownBlockType"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "debuggingInsertIntersectionsWithBezierGraph:": {
      "name": "debuggingInsertIntersectionsWithBezierGraph:",
      "bridgedName": "debuggingInsertIntersectionsWithBezierGraph",
      "args": [
        {
          "name": "debuggingInsertIntersectionsWithBezierGraph",
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "debuggingInsertCrossingsForFillConversion": {
      "name": "debuggingInsertCrossingsForFillConversion",
      "bridgedName": "debuggingInsertCrossingsForFillConversion",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "debuggingInsertCrossingsWithBezierGraph:markInside:markOtherInside:": {
      "name": "debuggingInsertCrossingsWithBezierGraph:markInside:markOtherInside:",
      "bridgedName": "debuggingInsertCrossingsWithBezierGraph_markInside_markOtherInside",
      "args": [
        {
          "name": "debuggingInsertCrossingsWithBezierGraph",
          "type": "id"
        },
        {
          "name": "markInside",
          "type": "BOOL"
        },
        {
          "name": "markOtherInside",
          "type": "BOOL"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "debuggingInsertCrossingsForDifferenceWithBezierGraph:": {
      "name": "debuggingInsertCrossingsForDifferenceWithBezierGraph:",
      "bridgedName": "debuggingInsertCrossingsForDifferenceWithBezierGraph",
      "args": [
        {
          "name": "debuggingInsertCrossingsForDifferenceWithBezierGraph",
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "debuggingInsertCrossingsForIntersectWithBezierGraph:": {
      "name": "debuggingInsertCrossingsForIntersectWithBezierGraph:",
      "bridgedName": "debuggingInsertCrossingsForIntersectWithBezierGraph",
      "args": [
        {
          "name": "debuggingInsertCrossingsForIntersectWithBezierGraph",
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "debuggingInsertCrossingsForUnionWithBezierGraph:": {
      "name": "debuggingInsertCrossingsForUnionWithBezierGraph:",
      "bridgedName": "debuggingInsertCrossingsForUnionWithBezierGraph",
      "args": [
        {
          "name": "debuggingInsertCrossingsForUnionWithBezierGraph",
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "nonselfIntersectingContours": {
      "name": "nonselfIntersectingContours",
      "bridgedName": "nonselfIntersectingContours",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "nonintersectingContours": {
      "name": "nonintersectingContours",
      "bridgedName": "nonintersectingContours",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "disjointContours": {
      "name": "disjointContours",
      "bridgedName": "disjointContours",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "addContour:": {
      "name": "addContour:",
      "bridgedName": "addContour",
      "args": [
        {
          "name": "addContour",
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "removeOverlaps": {
      "name": "removeOverlaps",
      "bridgedName": "removeOverlaps",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "removeCrossings": {
      "name": "removeCrossings",
      "bridgedName": "removeCrossings",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "bezierGraphFromNonselfIntersections:": {
      "name": "bezierGraphFromNonselfIntersections:",
      "bridgedName": "bezierGraphFromNonselfIntersections",
      "args": [
        {
          "name": "bezierGraphFromNonselfIntersections",
          "type": "BOOL"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "addReverseCurvesFromCrossing:useNonself:toContour:": {
      "name": "addReverseCurvesFromCrossing:useNonself:toContour:",
      "bridgedName": "addReverseCurvesFromCrossing_useNonself_toContour",
      "args": [
        {
          "name": "addReverseCurvesFromCrossing",
          "type": "id"
        },
        {
          "name": "useNonself",
          "type": "BOOL"
        },
        {
          "name": "toContour",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "addCurvesFromCrossing:useNonself:toContour:": {
      "name": "addCurvesFromCrossing:useNonself:toContour:",
      "bridgedName": "addCurvesFromCrossing_useNonself_toContour",
      "args": [
        {
          "name": "addCurvesFromCrossing",
          "type": "id"
        },
        {
          "name": "useNonself",
          "type": "BOOL"
        },
        {
          "name": "toContour",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "firstUnprocessedCrossing:": {
      "name": "firstUnprocessedCrossing:",
      "bridgedName": "firstUnprocessedCrossing",
      "args": [
        {
          "name": "firstUnprocessedCrossing",
          "type": "BOOL"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "markAllCrossingsAsUnprocessed": {
      "name": "markAllCrossingsAsUnprocessed",
      "bridgedName": "markAllCrossingsAsUnprocessed",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "removeCrossings:forContours:": {
      "name": "removeCrossings:forContours:",
      "bridgedName": "removeCrossings_forContours",
      "args": [
        {
          "name": "removeCrossings",
          "type": "id"
        },
        {
          "name": "forContours",
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "removeContoursThatDontContain:": {
      "name": "removeContoursThatDontContain:",
      "bridgedName": "removeContoursThatDontContain",
      "args": [
        {
          "name": "removeContoursThatDontContain",
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "removeContourCrossings:thatDontAppearIn:": {
      "name": "removeContourCrossings:thatDontAppearIn:",
      "bridgedName": "removeContourCrossings_thatDontAppearIn",
      "args": [
        {
          "name": "removeContourCrossings",
          "type": "id"
        },
        {
          "name": "thatDontAppearIn",
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "contoursFromCrossings:": {
      "name": "contoursFromCrossings:",
      "bridgedName": "contoursFromCrossings",
      "args": [
        {
          "name": "contoursFromCrossings",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "eliminateContainers:thatDontContainContour:usingRay:": {
      "name": "eliminateContainers:thatDontContainContour:usingRay:",
      "bridgedName": "eliminateContainers_thatDontContainContour_usingRay",
      "args": [
        {
          "name": "eliminateContainers",
          "type": "id"
        },
        {
          "name": "thatDontContainContour",
          "type": "id"
        },
        {
          "name": "usingRay",
          "type": "id"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "numberOfTimesContour:appearsInCrossings:": {
      "name": "numberOfTimesContour:appearsInCrossings:",
      "bridgedName": "numberOfTimesContour_appearsInCrossings",
      "args": [
        {
          "name": "numberOfTimesContour",
          "type": "id"
        },
        {
          "name": "appearsInCrossings",
          "type": "id"
        }
      ],
      "returns": "unsigned long long",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "findCrossingsOnContainers:onRay:beforeMinimum:afterMaximum:crossingsBefore:crossingsAfter:": {
      "name": "findCrossingsOnContainers:onRay:beforeMinimum:afterMaximum:crossingsBefore:crossingsAfter:",
      "bridgedName": "findCrossingsOnContainers_onRay_beforeMinimum_afterMaximum_crossingsBefore_crossingsAfter",
      "args": [
        {
          "name": "findCrossingsOnContainers",
          "type": "id"
        },
        {
          "name": "onRay",
          "type": "id"
        },
        {
          "name": "beforeMinimum",
          "type": "struct CGPoint"
        },
        {
          "name": "afterMaximum",
          "type": "struct CGPoint"
        },
        {
          "name": "crossingsBefore",
          "type": "id"
        },
        {
          "name": "crossingsAfter",
          "type": "id"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "findBoundsOfContour:onRay:minimum:maximum:": {
      "name": "findBoundsOfContour:onRay:minimum:maximum:",
      "bridgedName": "findBoundsOfContour_onRay_minimum_maximum",
      "args": [
        {
          "name": "findBoundsOfContour",
          "type": "id"
        },
        {
          "name": "onRay",
          "type": "id"
        },
        {
          "name": "minimum",
          "type": "struct CGPoint *"
        },
        {
          "name": "maximum",
          "type": "struct CGPoint *"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "containsContour:": {
      "name": "containsContour:",
      "bridgedName": "containsContour",
      "args": [
        {
          "name": "containsContour",
          "type": "id"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "debugPathForJointsOfContour:": {
      "name": "debugPathForJointsOfContour:",
      "bridgedName": "debugPathForJointsOfContour",
      "args": [
        {
          "name": "debugPathForJointsOfContour",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "debugPathForContainmentOfContour:transform:": {
      "name": "debugPathForContainmentOfContour:transform:",
      "bridgedName": "debugPathForContainmentOfContour_transform",
      "args": [
        {
          "name": "debugPathForContainmentOfContour",
          "type": "id"
        },
        {
          "name": "transform",
          "type": "struct CGAffineTransform"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "debugPathForContainmentOfContour:": {
      "name": "debugPathForContainmentOfContour:",
      "bridgedName": "debugPathForContainmentOfContour",
      "args": [
        {
          "name": "debugPathForContainmentOfContour",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "closestCrossingToPoint:": {
      "name": "closestCrossingToPoint:",
      "bridgedName": "closestCrossingToPoint",
      "args": [
        {
          "name": "closestCrossingToPoint",
          "type": "struct CGPoint"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "closestLocationToPoint:": {
      "name": "closestLocationToPoint:",
      "bridgedName": "closestLocationToPoint",
      "args": [
        {
          "name": "closestLocationToPoint",
          "type": "struct CGPoint"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "contourInsides:": {
      "name": "contourInsides:",
      "bridgedName": "contourInsides",
      "args": [
        {
          "name": "contourInsides",
          "type": "id"
        }
      ],
      "returns": "int",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "containmentResultForContour:": {
      "name": "containmentResultForContour:",
      "bridgedName": "containmentResultForContour",
      "args": [
        {
          "name": "containmentResultForContour",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "insertSelfCrossings": {
      "name": "insertSelfCrossings",
      "bridgedName": "insertSelfCrossings",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "insertContourSelfCrossings": {
      "name": "insertContourSelfCrossings",
      "bridgedName": "insertContourSelfCrossings",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "isIntersection:atJoinOfEdge:andEdge:": {
      "name": "isIntersection:atJoinOfEdge:andEdge:",
      "bridgedName": "isIntersection_atJoinOfEdge_andEdge",
      "args": [
        {
          "name": "isIntersection",
          "type": "id"
        },
        {
          "name": "atJoinOfEdge",
          "type": "id"
        },
        {
          "name": "andEdge",
          "type": "id"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "sortCoincidentCrossings": {
      "name": "sortCoincidentCrossings",
      "bridgedName": "sortCoincidentCrossings",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "removeDuplicateCrossings": {
      "name": "removeDuplicateCrossings",
      "bridgedName": "removeDuplicateCrossings",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "insertCrossingsAtOverlapMiddle": {
      "name": "insertCrossingsAtOverlapMiddle",
      "bridgedName": "insertCrossingsAtOverlapMiddle",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "removeCrossingsInOverlapsWithTypes:": {
      "name": "removeCrossingsInOverlapsWithTypes:",
      "bridgedName": "removeCrossingsInOverlapsWithTypes",
      "args": [
        {
          "name": "removeCrossingsInOverlapsWithTypes",
          "type": "unsigned long long"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "removeCrossingsInNonCrossingOverlapRuns": {
      "name": "removeCrossingsInNonCrossingOverlapRuns",
      "bridgedName": "removeCrossingsInNonCrossingOverlapRuns",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "cleanupCrossingsWithBezierGraph:": {
      "name": "cleanupCrossingsWithBezierGraph:",
      "bridgedName": "cleanupCrossingsWithBezierGraph",
      "args": [
        {
          "name": "cleanupCrossingsWithBezierGraph",
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "insertCrossingsWithBezierGraph:overlapRunCrossingTypes:crossingPosition:": {
      "name": "insertCrossingsWithBezierGraph:overlapRunCrossingTypes:crossingPosition:",
      "bridgedName": "insertCrossingsWithBezierGraph_overlapRunCrossingTypes_crossingPosition",
      "args": [
        {
          "name": "insertCrossingsWithBezierGraph",
          "type": "id"
        },
        {
          "name": "overlapRunCrossingTypes",
          "type": "unsigned long long"
        },
        {
          "name": "crossingPosition",
          "type": "unsigned long long"
        }
      ],
      "returns": "unsigned long long",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "insertCrossingsWithBezierGraph:": {
      "name": "insertCrossingsWithBezierGraph:",
      "bridgedName": "insertCrossingsWithBezierGraph",
      "args": [
        {
          "name": "insertCrossingsWithBezierGraph",
          "type": "id"
        }
      ],
      "returns": "unsigned long long",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "bezierPathWithClass:": {
      "name": "bezierPathWithClass:",
      "bridgedName": "bezierPathWithClass",
      "args": [
        {
          "name": "bezierPathWithClass",
          "type": "Class"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "bezierPath": {
      "name": "bezierPath",
      "bridgedName": "bezierPath",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "bezierGraphWithClockwiseFillsAnticlockwiseHoles": {
      "name": "bezierGraphWithClockwiseFillsAnticlockwiseHoles",
      "bridgedName": "bezierGraphWithClockwiseFillsAnticlockwiseHoles",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "noneWithBezierGraph:": {
      "name": "noneWithBezierGraph:",
      "bridgedName": "noneWithBezierGraph",
      "args": [
        {
          "name": "noneWithBezierGraph",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "xorWithBezierGraph:": {
      "name": "xorWithBezierGraph:",
      "bridgedName": "xorWithBezierGraph",
      "args": [
        {
          "name": "xorWithBezierGraph",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "markSelfCrossingsAsEntryOrExit": {
      "name": "markSelfCrossingsAsEntryOrExit",
      "bridgedName": "markSelfCrossingsAsEntryOrExit",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "markCrossingsAsEntryOrExitWithBezierGraph:markInside:": {
      "name": "markCrossingsAsEntryOrExitWithBezierGraph:markInside:",
      "bridgedName": "markCrossingsAsEntryOrExitWithBezierGraph_markInside",
      "args": [
        {
          "name": "markCrossingsAsEntryOrExitWithBezierGraph",
          "type": "id"
        },
        {
          "name": "markInside",
          "type": "BOOL"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "differenceEquivalentNonintersectingContours:withContours:results:": {
      "name": "differenceEquivalentNonintersectingContours:withContours:results:",
      "bridgedName": "differenceEquivalentNonintersectingContours_withContours_results",
      "args": [
        {
          "name": "differenceEquivalentNonintersectingContours",
          "type": "id"
        },
        {
          "name": "withContours",
          "type": "id"
        },
        {
          "name": "results",
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "differenceWithBezierGraph:": {
      "name": "differenceWithBezierGraph:",
      "bridgedName": "differenceWithBezierGraph",
      "args": [
        {
          "name": "differenceWithBezierGraph",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "intersectEquivalentNonintersectingContours:withContours:results:": {
      "name": "intersectEquivalentNonintersectingContours:withContours:results:",
      "bridgedName": "intersectEquivalentNonintersectingContours_withContours_results",
      "args": [
        {
          "name": "intersectEquivalentNonintersectingContours",
          "type": "id"
        },
        {
          "name": "withContours",
          "type": "id"
        },
        {
          "name": "results",
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "intersectNonintersectingPartsIntoGraph:withGraph:": {
      "name": "intersectNonintersectingPartsIntoGraph:withGraph:",
      "bridgedName": "intersectNonintersectingPartsIntoGraph_withGraph",
      "args": [
        {
          "name": "intersectNonintersectingPartsIntoGraph",
          "type": "id"
        },
        {
          "name": "withGraph",
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "intersectWithBezierGraph:": {
      "name": "intersectWithBezierGraph:",
      "bridgedName": "intersectWithBezierGraph",
      "args": [
        {
          "name": "intersectWithBezierGraph",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "unionEquivalentNonintersectingContours:withContours:results:": {
      "name": "unionEquivalentNonintersectingContours:withContours:results:",
      "bridgedName": "unionEquivalentNonintersectingContours_withContours_results",
      "args": [
        {
          "name": "unionEquivalentNonintersectingContours",
          "type": "id"
        },
        {
          "name": "withContours",
          "type": "id"
        },
        {
          "name": "results",
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "unionNonintersectingPartsIntoGraph:withGraph:": {
      "name": "unionNonintersectingPartsIntoGraph:withGraph:",
      "bridgedName": "unionNonintersectingPartsIntoGraph_withGraph",
      "args": [
        {
          "name": "unionNonintersectingPartsIntoGraph",
          "type": "id"
        },
        {
          "name": "withGraph",
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "unionWithBezierGraph:": {
      "name": "unionWithBezierGraph:",
      "bridgedName": "unionWithBezierGraph",
      "args": [
        {
          "name": "unionWithBezierGraph",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "performOperationWithGraph:inBlock:": {
      "name": "performOperationWithGraph:inBlock:",
      "bridgedName": "performOperationWithGraph_inBlock",
      "args": [
        {
          "name": "performOperationWithGraph",
          "type": "id"
        },
        {
          "name": "inBlock",
          "type": "CDUnknownBlockType"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "convertToEvenOddWindingRule": {
      "name": "convertToEvenOddWindingRule",
      "bridgedName": "convertToEvenOddWindingRule",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "convertToNoneZeroWindingRule": {
      "name": "convertToNoneZeroWindingRule",
      "bridgedName": "convertToNoneZeroWindingRule",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "contourByFollowingCrossingsFromEdge:atOffset:": {
      "name": "contourByFollowingCrossingsFromEdge:atOffset:",
      "bridgedName": "contourByFollowingCrossingsFromEdge_atOffset",
      "args": [
        {
          "name": "contourByFollowingCrossingsFromEdge",
          "type": "id"
        },
        {
          "name": "atOffset",
          "type": "double"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "contourByFollowingUnprocessedCrossingsFromCrossing:": {
      "name": "contourByFollowingUnprocessedCrossingsFromCrossing:",
      "bridgedName": "contourByFollowingUnprocessedCrossingsFromCrossing",
      "args": [
        {
          "name": "contourByFollowingUnprocessedCrossingsFromCrossing",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "dealloc": {
      "name": "dealloc",
      "bridgedName": "dealloc",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "init": {
      "name": "init",
      "bridgedName": "init",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "initWithBezierPath:orCGPath:": {
      "name": "initWithBezierPath:orCGPath:",
      "bridgedName": "initWithBezierPath_orCGPath",
      "args": [
        {
          "name": "initWithBezierPath",
          "type": "id"
        },
        {
          "name": "orCGPath",
          "type": "struct CGPath *"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "initWithBezierPath:": {
      "name": "initWithBezierPath:",
      "bridgedName": "initWithBezierPath",
      "args": [
        {
          "name": "initWithBezierPath",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "initWithCGPath:": {
      "name": "initWithCGPath:",
      "bridgedName": "initWithCGPath",
      "args": [
        {
          "name": "initWithCGPath",
          "type": "struct CGPath *"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    }
  },
  "properties": {
    "insertedSelfCrossings": {
      "name": "insertedSelfCrossings",
      "pointer": false,
      "type": "BOOL",
      "attributes": [
        "nonatomic"
      ]
    },
    "CGPath": {
      "name": "CGPath",
      "pointer": true,
      "type": "struct CGPath",
      "attributes": [
        "nonatomic"
      ]
    },
    "contours": {
      "name": "contours",
      "pointer": true,
      "type": "NSArray",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "nonEmptyContours": {
      "name": "nonEmptyContours",
      "pointer": true,
      "type": "NSArray",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "bounds": {
      "name": "bounds",
      "pointer": false,
      "type": "struct CGRect",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    }
  }
}