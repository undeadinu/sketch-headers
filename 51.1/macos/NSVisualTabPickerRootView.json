{
  "imports": [],
  "classes": [
    "NSScrollView",
    "NSVisualTabPickerGridView",
    "NSVisualTabPickerRootViewController",
    "NSVisualTabPickerSearchField"
  ],
  "protocol": false,
  "className": "NSVisualTabPickerRootView",
  "extends": "NSView",
  "interfaces": [],
  "methods": {
    ".cxx_destruct": {
      "name": ".cxx_destruct",
      "bridgedName": ".cxx_destruct",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "setUpSubviewsShowingNewTabButton:highlightingTiles:showingCloseButtons:": {
      "name": "setUpSubviewsShowingNewTabButton:highlightingTiles:showingCloseButtons:",
      "bridgedName": "setUpSubviewsShowingNewTabButton_highlightingTiles_showingCloseButtons",
      "args": [
        {
          "name": "setUpSubviewsShowingNewTabButton",
          "type": "BOOL"
        },
        {
          "name": "highlightingTiles",
          "type": "BOOL"
        },
        {
          "name": "showingCloseButtons",
          "type": "BOOL"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_startTopBarAndCloudViewAnimation:": {
      "name": "_startTopBarAndCloudViewAnimation:",
      "bridgedName": "_startTopBarAndCloudViewAnimation",
      "args": [
        {
          "name": "_startTopBarAndCloudViewAnimation",
          "type": "long long"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_startPerspectiveAnimation:": {
      "name": "_startPerspectiveAnimation:",
      "bridgedName": "_startPerspectiveAnimation",
      "args": [
        {
          "name": "_startPerspectiveAnimation",
          "type": "long long"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_getTopBarAnimationDuration:timeOffset:gridAnimation:": {
      "name": "_getTopBarAnimationDuration:timeOffset:gridAnimation:",
      "bridgedName": "_getTopBarAnimationDuration_timeOffset_gridAnimation",
      "args": [
        {
          "name": "_getTopBarAnimationDuration",
          "type": "double *"
        },
        {
          "name": "timeOffset",
          "type": "double *"
        },
        {
          "name": "gridAnimation",
          "type": "long long"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "setFrameSize:": {
      "name": "setFrameSize:",
      "bridgedName": "setFrameSize",
      "args": [
        {
          "name": "setFrameSize",
          "type": "struct CGSize"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "showSearchField": {
      "name": "showSearchField",
      "bridgedName": "showSearchField",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "makeSearchFieldFirstResponder": {
      "name": "makeSearchFieldFirstResponder",
      "bridgedName": "makeSearchFieldFirstResponder",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "performKeyEquivalent:": {
      "name": "performKeyEquivalent:",
      "bridgedName": "performKeyEquivalent",
      "args": [
        {
          "name": "performKeyEquivalent",
          "type": "id"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "startGridAnimation:completionHandler:": {
      "name": "startGridAnimation:completionHandler:",
      "bridgedName": "startGridAnimation_completionHandler",
      "args": [
        {
          "name": "startGridAnimation",
          "type": "long long"
        },
        {
          "name": "completionHandler",
          "type": "CDUnknownBlockType"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "cancelOperation:": {
      "name": "cancelOperation:",
      "bridgedName": "cancelOperation",
      "args": [
        {
          "name": "cancelOperation",
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "mouseDownCanMoveWindow": {
      "name": "mouseDownCanMoveWindow",
      "bridgedName": "mouseDownCanMoveWindow",
      "args": [],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "acceptsFirstResponder": {
      "name": "acceptsFirstResponder",
      "bridgedName": "acceptsFirstResponder",
      "args": [],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "updateLayer": {
      "name": "updateLayer",
      "bridgedName": "updateLayer",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "wantsUpdateLayer": {
      "name": "wantsUpdateLayer",
      "bridgedName": "wantsUpdateLayer",
      "args": [],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "initWithFrame:visualTabPickerViewController:": {
      "name": "initWithFrame:visualTabPickerViewController:",
      "bridgedName": "initWithFrame_visualTabPickerViewController",
      "args": [
        {
          "name": "initWithFrame",
          "type": "struct CGRect"
        },
        {
          "name": "visualTabPickerViewController",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    }
  },
  "properties": {
    "visualTabPickerViewController": {
      "name": "visualTabPickerViewController",
      "pointer": true,
      "type": "__weak NSVisualTabPickerRootViewController",
      "attributes": [
        "nonatomic"
      ]
    },
    "searchField": {
      "name": "searchField",
      "pointer": true,
      "type": "NSVisualTabPickerSearchField",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "gridView": {
      "name": "gridView",
      "pointer": true,
      "type": "NSVisualTabPickerGridView",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    }
  }
}