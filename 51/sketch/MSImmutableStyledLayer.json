{
  "imports": [
    "_MSImmutableStyledLayer.h"
  ],
  "classes": [
    "MSImmutableStyle"
  ],
  "protocol": false,
  "className": "MSImmutableStyledLayer",
  "extends": "_MSImmutableStyledLayer",
  "interfaces": [],
  "methods": {
    "traits": {
      "name": "traits",
      "bridgedName": "traits",
      "args": [],
      "returns": "unsigned long long",
      "kind": "class",
      "kindIndicator": "+"
    },
    "filledSquareRoundedDecoration": {
      "name": "filledSquareRoundedDecoration",
      "bridgedName": "filledSquareRoundedDecoration",
      "args": [],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "filledSquareDecoration": {
      "name": "filledSquareDecoration",
      "bridgedName": "filledSquareDecoration",
      "args": [],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "openSquareDecoration": {
      "name": "openSquareDecoration",
      "bridgedName": "openSquareDecoration",
      "args": [],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "filledCircleDecoration": {
      "name": "filledCircleDecoration",
      "bridgedName": "filledCircleDecoration",
      "args": [],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "openCircleDecoration": {
      "name": "openCircleDecoration",
      "bridgedName": "openCircleDecoration",
      "args": [],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "lineDecoration": {
      "name": "lineDecoration",
      "bridgedName": "lineDecoration",
      "args": [],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "openArrowDecoration": {
      "name": "openArrowDecoration",
      "bridgedName": "openArrowDecoration",
      "args": [],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "filledArrowDecoration": {
      "name": "filledArrowDecoration",
      "bridgedName": "filledArrowDecoration",
      "args": [],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "filledArrowRoundedDecoration": {
      "name": "filledArrowRoundedDecoration",
      "bridgedName": "filledArrowRoundedDecoration",
      "args": [],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "roundedPath:cornerRadius:": {
      "name": "roundedPath:cornerRadius:",
      "bridgedName": "roundedPath_cornerRadius",
      "args": [
        {
          "name": "roundedPath",
          "type": "id"
        },
        {
          "name": "cornerRadius",
          "type": "double"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "pathForDecorationType:": {
      "name": "pathForDecorationType:",
      "bridgedName": "pathForDecorationType",
      "args": [
        {
          "name": "pathForDecorationType",
          "type": "unsigned long long"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "cacheDecorations": {
      "name": "cacheDecorations",
      "bridgedName": "cacheDecorations",
      "args": [],
      "returns": "void",
      "kind": "class",
      "kindIndicator": "+"
    },
    "transformedPath:atPoint:rotation:scale:flipped:": {
      "name": "transformedPath:atPoint:rotation:scale:flipped:",
      "bridgedName": "transformedPath_atPoint_rotation_scale_flipped",
      "args": [
        {
          "name": "transformedPath",
          "type": "id"
        },
        {
          "name": "atPoint",
          "type": "struct CGPoint"
        },
        {
          "name": "rotation",
          "type": "double"
        },
        {
          "name": "scale",
          "type": "struct CGSize"
        },
        {
          "name": "flipped",
          "type": "BOOL"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "adjustPath:forDecotationType:strokeWidth:scale:": {
      "name": "adjustPath:forDecotationType:strokeWidth:scale:",
      "bridgedName": "adjustPath_forDecotationType_strokeWidth_scale",
      "args": [
        {
          "name": "adjustPath",
          "type": "id"
        },
        {
          "name": "forDecotationType",
          "type": "unsigned long long"
        },
        {
          "name": "strokeWidth",
          "type": "double"
        },
        {
          "name": "scale",
          "type": "struct CGSize"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "orderedIntersectionsForContour:withSegment:": {
      "name": "orderedIntersectionsForContour:withSegment:",
      "bridgedName": "orderedIntersectionsForContour_withSegment",
      "args": [
        {
          "name": "orderedIntersectionsForContour",
          "type": "id"
        },
        {
          "name": "withSegment",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "intersectionPolygonForDecoration:atPoint:scale:strokeWidth:": {
      "name": "intersectionPolygonForDecoration:atPoint:scale:strokeWidth:",
      "bridgedName": "intersectionPolygonForDecoration_atPoint_scale_strokeWidth",
      "args": [
        {
          "name": "intersectionPolygonForDecoration",
          "type": "id"
        },
        {
          "name": "atPoint",
          "type": "struct CGPoint"
        },
        {
          "name": "scale",
          "type": "double"
        },
        {
          "name": "strokeWidth",
          "type": "double"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "bezierPathForEndDecorationOnPath:strokeWidth:lineCap:decorationType:": {
      "name": "bezierPathForEndDecorationOnPath:strokeWidth:lineCap:decorationType:",
      "bridgedName": "bezierPathForEndDecorationOnPath_strokeWidth_lineCap_decorationType",
      "args": [
        {
          "name": "bezierPathForEndDecorationOnPath",
          "type": "id *"
        },
        {
          "name": "strokeWidth",
          "type": "double"
        },
        {
          "name": "lineCap",
          "type": "int"
        },
        {
          "name": "decorationType",
          "type": "unsigned long long"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "bezierPathForStartDecorationOnPath:strokeWidth:lineCap:decorationType:": {
      "name": "bezierPathForStartDecorationOnPath:strokeWidth:lineCap:decorationType:",
      "bridgedName": "bezierPathForStartDecorationOnPath_strokeWidth_lineCap_decorationType",
      "args": [
        {
          "name": "bezierPathForStartDecorationOnPath",
          "type": "id *"
        },
        {
          "name": "strokeWidth",
          "type": "double"
        },
        {
          "name": "lineCap",
          "type": "int"
        },
        {
          "name": "decorationType",
          "type": "unsigned long long"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "scaleForDecoration:stokeWidth:": {
      "name": "scaleForDecoration:stokeWidth:",
      "bridgedName": "scaleForDecoration_stokeWidth",
      "args": [
        {
          "name": "scaleForDecoration",
          "type": "unsigned long long"
        },
        {
          "name": "stokeWidth",
          "type": "double"
        }
      ],
      "returns": "struct CGSize",
      "kind": "class",
      "kindIndicator": "+"
    },
    "previewFillColorForDocumentData:selected:": {
      "name": "previewFillColorForDocumentData:selected:",
      "bridgedName": "previewFillColorForDocumentData_selected",
      "args": [
        {
          "name": "previewFillColorForDocumentData",
          "type": "id"
        },
        {
          "name": "selected",
          "type": "BOOL"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "previewBorderColorForDocumentData:selected:": {
      "name": "previewBorderColorForDocumentData:selected:",
      "bridgedName": "previewBorderColorForDocumentData_selected",
      "args": [
        {
          "name": "previewBorderColorForDocumentData",
          "type": "id"
        },
        {
          "name": "selected",
          "type": "BOOL"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "hasSharedStyleInDocumentData:": {
      "name": "hasSharedStyleInDocumentData:",
      "bridgedName": "hasSharedStyleInDocumentData",
      "args": [
        {
          "name": "hasSharedStyleInDocumentData",
          "type": "id"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "bezierPathForEndDecorationOnPath:": {
      "name": "bezierPathForEndDecorationOnPath:",
      "bridgedName": "bezierPathForEndDecorationOnPath",
      "args": [
        {
          "name": "bezierPathForEndDecorationOnPath",
          "type": "id *"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "bezierPathForStartDecorationOnPath:": {
      "name": "bezierPathForStartDecorationOnPath:",
      "bridgedName": "bezierPathForStartDecorationOnPath",
      "args": [
        {
          "name": "bezierPathForStartDecorationOnPath",
          "type": "id *"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "roundDecorationTypeIfNecessary:": {
      "name": "roundDecorationTypeIfNecessary:",
      "bridgedName": "roundDecorationTypeIfNecessary",
      "args": [
        {
          "name": "roundDecorationTypeIfNecessary",
          "type": "unsigned long long"
        }
      ],
      "returns": "unsigned long long",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "trackColorsForBasicFill:tracker:": {
      "name": "trackColorsForBasicFill:tracker:",
      "bridgedName": "trackColorsForBasicFill_tracker",
      "args": [
        {
          "name": "trackColorsForBasicFill",
          "type": "id"
        },
        {
          "name": "tracker",
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "trackColors:": {
      "name": "trackColors:",
      "bridgedName": "trackColors",
      "args": [
        {
          "name": "trackColors",
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "renderBitmapEffects:": {
      "name": "renderBitmapEffects:",
      "bridgedName": "renderBitmapEffects",
      "args": [
        {
          "name": "renderBitmapEffects",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "strokeStyleForDecoratedPath": {
      "name": "strokeStyleForDecoratedPath",
      "bridgedName": "strokeStyleForDecoratedPath",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "fillStyleForDecoratedPath": {
      "name": "fillStyleForDecoratedPath",
      "bridgedName": "fillStyleForDecoratedPath",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "fillPathWithDecorations:context:strokePath:": {
      "name": "fillPathWithDecorations:context:strokePath:",
      "bridgedName": "fillPathWithDecorations_context_strokePath",
      "args": [
        {
          "name": "fillPathWithDecorations",
          "type": "id"
        },
        {
          "name": "context",
          "type": "struct CGContext *"
        },
        {
          "name": "strokePath",
          "type": "id *"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "shouldSkipDrawingInContext:": {
      "name": "shouldSkipDrawingInContext:",
      "bridgedName": "shouldSkipDrawingInContext",
      "args": [
        {
          "name": "shouldSkipDrawingInContext",
          "type": "id"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "shouldRenderInTransparencyLayer": {
      "name": "shouldRenderInTransparencyLayer",
      "bridgedName": "shouldRenderInTransparencyLayer",
      "args": [],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "prepareDrawingInContext:inBlock:": {
      "name": "prepareDrawingInContext:inBlock:",
      "bridgedName": "prepareDrawingInContext_inBlock",
      "args": [
        {
          "name": "prepareDrawingInContext",
          "type": "id"
        },
        {
          "name": "inBlock",
          "type": "CDUnknownBlockType"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "addGroupContentToElement:attributes:exporter:": {
      "name": "addGroupContentToElement:attributes:exporter:",
      "bridgedName": "addGroupContentToElement_attributes_exporter",
      "args": [
        {
          "name": "addGroupContentToElement",
          "type": "id"
        },
        {
          "name": "attributes",
          "type": "id"
        },
        {
          "name": "exporter",
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "addGradientsToDocument:": {
      "name": "addGradientsToDocument:",
      "bridgedName": "addGradientsToDocument",
      "args": [
        {
          "name": "addGradientsToDocument",
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    }
  },
  "properties": {
    "allowsBlur": {
      "name": "allowsBlur",
      "pointer": false,
      "type": "BOOL",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "usedStyle": {
      "name": "usedStyle",
      "pointer": true,
      "type": "MSImmutableStyle",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "shouldRasterize": {
      "name": "shouldRasterize",
      "pointer": false,
      "type": "BOOL",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    }
  }
}