{
  "imports": [
    "NSObject.h",
    "NSCoding.h",
    "NSCopying.h"
  ],
  "classes": [],
  "protocol": false,
  "className": "NSBezierPath",
  "extends": "NSObject",
  "interfaces": [
    "NSCopying",
    "NSCoding"
  ],
  "methods": {
    "defaultLineWidth": {
      "name": "defaultLineWidth",
      "bridgedName": "defaultLineWidth",
      "args": [],
      "returns": "double",
      "kind": "class",
      "kindIndicator": "+"
    },
    "setDefaultLineWidth:": {
      "name": "setDefaultLineWidth:",
      "bridgedName": "setDefaultLineWidth",
      "args": [
        {
          "type": "double"
        }
      ],
      "returns": "void",
      "kind": "class",
      "kindIndicator": "+"
    },
    "defaultLineJoinStyle": {
      "name": "defaultLineJoinStyle",
      "bridgedName": "defaultLineJoinStyle",
      "args": [],
      "returns": "unsigned long long",
      "kind": "class",
      "kindIndicator": "+"
    },
    "setDefaultLineJoinStyle:": {
      "name": "setDefaultLineJoinStyle:",
      "bridgedName": "setDefaultLineJoinStyle",
      "args": [
        {
          "type": "unsigned long long"
        }
      ],
      "returns": "void",
      "kind": "class",
      "kindIndicator": "+"
    },
    "defaultLineCapStyle": {
      "name": "defaultLineCapStyle",
      "bridgedName": "defaultLineCapStyle",
      "args": [],
      "returns": "unsigned long long",
      "kind": "class",
      "kindIndicator": "+"
    },
    "setDefaultLineCapStyle:": {
      "name": "setDefaultLineCapStyle:",
      "bridgedName": "setDefaultLineCapStyle",
      "args": [
        {
          "type": "unsigned long long"
        }
      ],
      "returns": "void",
      "kind": "class",
      "kindIndicator": "+"
    },
    "defaultWindingRule": {
      "name": "defaultWindingRule",
      "bridgedName": "defaultWindingRule",
      "args": [],
      "returns": "unsigned long long",
      "kind": "class",
      "kindIndicator": "+"
    },
    "setDefaultWindingRule:": {
      "name": "setDefaultWindingRule:",
      "bridgedName": "setDefaultWindingRule",
      "args": [
        {
          "type": "unsigned long long"
        }
      ],
      "returns": "void",
      "kind": "class",
      "kindIndicator": "+"
    },
    "defaultFlatness": {
      "name": "defaultFlatness",
      "bridgedName": "defaultFlatness",
      "args": [],
      "returns": "double",
      "kind": "class",
      "kindIndicator": "+"
    },
    "setDefaultFlatness:": {
      "name": "setDefaultFlatness:",
      "bridgedName": "setDefaultFlatness",
      "args": [
        {
          "type": "double"
        }
      ],
      "returns": "void",
      "kind": "class",
      "kindIndicator": "+"
    },
    "defaultMiterLimit": {
      "name": "defaultMiterLimit",
      "bridgedName": "defaultMiterLimit",
      "args": [],
      "returns": "double",
      "kind": "class",
      "kindIndicator": "+"
    },
    "setDefaultMiterLimit:": {
      "name": "setDefaultMiterLimit:",
      "bridgedName": "setDefaultMiterLimit",
      "args": [
        {
          "type": "double"
        }
      ],
      "returns": "void",
      "kind": "class",
      "kindIndicator": "+"
    },
    "drawPackedGlyphs:atPoint:": {
      "name": "drawPackedGlyphs:atPoint:",
      "bridgedName": "drawPackedGlyphs_atPoint",
      "args": [
        {
          "type": "const char *"
        },
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "void",
      "kind": "class",
      "kindIndicator": "+"
    },
    "strokeLineFromPoint:toPoint:": {
      "name": "strokeLineFromPoint:toPoint:",
      "bridgedName": "strokeLineFromPoint_toPoint",
      "args": [
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "void",
      "kind": "class",
      "kindIndicator": "+"
    },
    "clipRect:": {
      "name": "clipRect:",
      "bridgedName": "clipRect",
      "args": [
        {
          "type": "struct CGRect"
        }
      ],
      "returns": "void",
      "kind": "class",
      "kindIndicator": "+"
    },
    "strokeRect:": {
      "name": "strokeRect:",
      "bridgedName": "strokeRect",
      "args": [
        {
          "type": "struct CGRect"
        }
      ],
      "returns": "void",
      "kind": "class",
      "kindIndicator": "+"
    },
    "fillRect:": {
      "name": "fillRect:",
      "bridgedName": "fillRect",
      "args": [
        {
          "type": "struct CGRect"
        }
      ],
      "returns": "void",
      "kind": "class",
      "kindIndicator": "+"
    },
    "bezierPathWithRoundedRect:xRadius:yRadius:": {
      "name": "bezierPathWithRoundedRect:xRadius:yRadius:",
      "bridgedName": "bezierPathWithRoundedRect_xRadius_yRadius",
      "args": [
        {
          "type": "struct CGRect"
        },
        {
          "type": "double"
        },
        {
          "type": "double"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "bezierPathWithOvalInRect:": {
      "name": "bezierPathWithOvalInRect:",
      "bridgedName": "bezierPathWithOvalInRect",
      "args": [
        {
          "type": "struct CGRect"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "bezierPathWithRect:": {
      "name": "bezierPathWithRect:",
      "bridgedName": "bezierPathWithRect",
      "args": [
        {
          "type": "struct CGRect"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "bezierPath": {
      "name": "bezierPath",
      "bridgedName": "bezierPath",
      "args": [],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "initialize": {
      "name": "initialize",
      "bridgedName": "initialize",
      "args": [],
      "returns": "void",
      "kind": "class",
      "kindIndicator": "+"
    },
    "lineWidth": {
      "name": "lineWidth",
      "bridgedName": "lineWidth",
      "args": [],
      "returns": "double",
      "kind": "class",
      "kindIndicator": "+"
    },
    "setLineWidth:": {
      "name": "setLineWidth:",
      "bridgedName": "setLineWidth",
      "args": [
        {
          "type": "double"
        }
      ],
      "returns": "void",
      "kind": "class",
      "kindIndicator": "+"
    },
    "lineJoinStyle": {
      "name": "lineJoinStyle",
      "bridgedName": "lineJoinStyle",
      "args": [],
      "returns": "unsigned long long",
      "kind": "class",
      "kindIndicator": "+"
    },
    "setLineJoinStyle:": {
      "name": "setLineJoinStyle:",
      "bridgedName": "setLineJoinStyle",
      "args": [
        {
          "type": "unsigned long long"
        }
      ],
      "returns": "void",
      "kind": "class",
      "kindIndicator": "+"
    },
    "lineCapStyle": {
      "name": "lineCapStyle",
      "bridgedName": "lineCapStyle",
      "args": [],
      "returns": "unsigned long long",
      "kind": "class",
      "kindIndicator": "+"
    },
    "setLineCapStyle:": {
      "name": "setLineCapStyle:",
      "bridgedName": "setLineCapStyle",
      "args": [
        {
          "type": "unsigned long long"
        }
      ],
      "returns": "void",
      "kind": "class",
      "kindIndicator": "+"
    },
    "windingRule": {
      "name": "windingRule",
      "bridgedName": "windingRule",
      "args": [],
      "returns": "unsigned long long",
      "kind": "class",
      "kindIndicator": "+"
    },
    "setWindingRule:": {
      "name": "setWindingRule:",
      "bridgedName": "setWindingRule",
      "args": [
        {
          "type": "unsigned long long"
        }
      ],
      "returns": "void",
      "kind": "class",
      "kindIndicator": "+"
    },
    "flatness": {
      "name": "flatness",
      "bridgedName": "flatness",
      "args": [],
      "returns": "double",
      "kind": "class",
      "kindIndicator": "+"
    },
    "setFlatness:": {
      "name": "setFlatness:",
      "bridgedName": "setFlatness",
      "args": [
        {
          "type": "double"
        }
      ],
      "returns": "void",
      "kind": "class",
      "kindIndicator": "+"
    },
    "miterLimit": {
      "name": "miterLimit",
      "bridgedName": "miterLimit",
      "args": [],
      "returns": "double",
      "kind": "class",
      "kindIndicator": "+"
    },
    "setMiterLimit:": {
      "name": "setMiterLimit:",
      "bridgedName": "setMiterLimit",
      "args": [
        {
          "type": "double"
        }
      ],
      "returns": "void",
      "kind": "class",
      "kindIndicator": "+"
    },
    "bezierPathWithRoundedRect:xRadius:yRadius:roundedTopLeftCorner:roundedTopRightCorner:roundedBottomLeftCorner:roundedBottomRightCorner:": {
      "name": "bezierPathWithRoundedRect:xRadius:yRadius:roundedTopLeftCorner:roundedTopRightCorner:roundedBottomLeftCorner:roundedBottomRightCorner:",
      "bridgedName": "bezierPathWithRoundedRect_xRadius_yRadius_roundedTopLeftCorner_roundedTopRightCorner_roundedBottomLeftCorner_roundedBottomRightCorner",
      "args": [
        {
          "type": "struct CGRect"
        },
        {
          "type": "double"
        },
        {
          "type": "double"
        },
        {
          "type": "BOOL"
        },
        {
          "type": "BOOL"
        },
        {
          "type": "BOOL"
        },
        {
          "type": "BOOL"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "initWithCoder:": {
      "name": "initWithCoder:",
      "bridgedName": "initWithCoder",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "encodeWithCoder:": {
      "name": "encodeWithCoder:",
      "bridgedName": "encodeWithCoder",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "containsPoint:": {
      "name": "containsPoint:",
      "bridgedName": "containsPoint",
      "args": [
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "appendBezierPathWithRoundedRect:xRadius:yRadius:": {
      "name": "appendBezierPathWithRoundedRect:xRadius:yRadius:",
      "bridgedName": "appendBezierPathWithRoundedRect_xRadius_yRadius",
      "args": [
        {
          "type": "struct CGRect"
        },
        {
          "type": "double"
        },
        {
          "type": "double"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "appendBezierPathWithCGGlyphs:count:inFont:": {
      "name": "appendBezierPathWithCGGlyphs:count:inFont:",
      "bridgedName": "appendBezierPathWithCGGlyphs_count_inFont",
      "args": [
        {
          "type": "const unsigned short *"
        },
        {
          "type": "long long"
        },
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "appendBezierPathWithCGGlyph:inFont:": {
      "name": "appendBezierPathWithCGGlyph:inFont:",
      "bridgedName": "appendBezierPathWithCGGlyph_inFont",
      "args": [
        {
          "type": "unsigned short"
        },
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "appendBezierPathWithNativeGlyphs:advances:count:inFont:": {
      "name": "appendBezierPathWithNativeGlyphs:advances:count:inFont:",
      "bridgedName": "appendBezierPathWithNativeGlyphs_advances_count_inFont",
      "args": [
        {
          "type": "const unsigned short *"
        },
        {
          "type": "struct CGSize *"
        },
        {
          "type": "unsigned long long"
        },
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "appendBezierPathWithArcFromPoint:toPoint:radius:": {
      "name": "appendBezierPathWithArcFromPoint:toPoint:radius:",
      "bridgedName": "appendBezierPathWithArcFromPoint_toPoint_radius",
      "args": [
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        },
        {
          "type": "double"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:": {
      "name": "appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:",
      "bridgedName": "appendBezierPathWithArcWithCenter_radius_startAngle_endAngle",
      "args": [
        {
          "type": "struct CGPoint"
        },
        {
          "type": "double"
        },
        {
          "type": "double"
        },
        {
          "type": "double"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:": {
      "name": "appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:",
      "bridgedName": "appendBezierPathWithArcWithCenter_radius_startAngle_endAngle_clockwise",
      "args": [
        {
          "type": "struct CGPoint"
        },
        {
          "type": "double"
        },
        {
          "type": "double"
        },
        {
          "type": "double"
        },
        {
          "type": "BOOL"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_appendArcSegmentWithCenter:radius:angle1:angle2:": {
      "name": "_appendArcSegmentWithCenter:radius:angle1:angle2:",
      "bridgedName": "_appendArcSegmentWithCenter_radius_angle1_angle2",
      "args": [
        {
          "type": "struct CGPoint"
        },
        {
          "type": "double"
        },
        {
          "type": "double"
        },
        {
          "type": "double"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "appendBezierPathWithOvalInRect:": {
      "name": "appendBezierPathWithOvalInRect:",
      "bridgedName": "appendBezierPathWithOvalInRect",
      "args": [
        {
          "type": "struct CGRect"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "appendBezierPathWithPoints:count:": {
      "name": "appendBezierPathWithPoints:count:",
      "bridgedName": "appendBezierPathWithPoints_count",
      "args": [
        {
          "type": "struct CGPoint *"
        },
        {
          "type": "long long"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "appendBezierPathWithRect:": {
      "name": "appendBezierPathWithRect:",
      "bridgedName": "appendBezierPathWithRect",
      "args": [
        {
          "type": "struct CGRect"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "appendBezierPath:": {
      "name": "appendBezierPath:",
      "bridgedName": "appendBezierPath",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_appendToPath:": {
      "name": "_appendToPath:",
      "bridgedName": "_appendToPath",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "setAssociatedPoints:atIndex:": {
      "name": "setAssociatedPoints:atIndex:",
      "bridgedName": "setAssociatedPoints_atIndex",
      "args": [
        {
          "type": "struct CGPoint *"
        },
        {
          "type": "long long"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "elementAtIndex:associatedPoints:": {
      "name": "elementAtIndex:associatedPoints:",
      "bridgedName": "elementAtIndex_associatedPoints",
      "args": [
        {
          "type": "long long"
        },
        {
          "type": "struct CGPoint *"
        }
      ],
      "returns": "unsigned long long",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "elementAtIndex:": {
      "name": "elementAtIndex:",
      "bridgedName": "elementAtIndex",
      "args": [
        {
          "type": "long long"
        }
      ],
      "returns": "unsigned long long",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "transformUsingAffineTransform:": {
      "name": "transformUsingAffineTransform:",
      "bridgedName": "transformUsingAffineTransform",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_copyFlattenedPath": {
      "name": "_copyFlattenedPath",
      "bridgedName": "_copyFlattenedPath",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "flattenIntoPath:": {
      "name": "flattenIntoPath:",
      "bridgedName": "flattenIntoPath",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "subdivideBezierWithFlatness:startPoint:controlPoint1:controlPoint2:endPoint:": {
      "name": "subdivideBezierWithFlatness:startPoint:controlPoint1:controlPoint2:endPoint:",
      "bridgedName": "subdivideBezierWithFlatness_startPoint_controlPoint1_controlPoint2_endPoint",
      "args": [
        {
          "type": "double"
        },
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "setClip": {
      "name": "setClip",
      "bridgedName": "setClip",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "addClip": {
      "name": "addClip",
      "bridgedName": "addClip",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "fill": {
      "name": "fill",
      "bridgedName": "fill",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "stroke": {
      "name": "stroke",
      "bridgedName": "stroke",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "CGPath": {
      "name": "CGPath",
      "bridgedName": "CGPath",
      "args": [],
      "returns": "struct CGPath *",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_doPath": {
      "name": "_doPath",
      "bridgedName": "_doPath",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "getLineDash:count:phase:": {
      "name": "getLineDash:count:phase:",
      "bridgedName": "getLineDash_count_phase",
      "args": [
        {
          "type": "double *"
        },
        {
          "type": "long long *"
        },
        {
          "type": "double *"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "setLineDash:count:phase:": {
      "name": "setLineDash:count:phase:",
      "bridgedName": "setLineDash_count_phase",
      "args": [
        {
          "type": "const double *"
        },
        {
          "type": "long long"
        },
        {
          "type": "double"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "relativeCurveToPoint:controlPoint1:controlPoint2:": {
      "name": "relativeCurveToPoint:controlPoint1:controlPoint2:",
      "bridgedName": "relativeCurveToPoint_controlPoint1_controlPoint2",
      "args": [
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "relativeLineToPoint:": {
      "name": "relativeLineToPoint:",
      "bridgedName": "relativeLineToPoint",
      "args": [
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "relativeMoveToPoint:": {
      "name": "relativeMoveToPoint:",
      "bridgedName": "relativeMoveToPoint",
      "args": [
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "removeAllPoints": {
      "name": "removeAllPoints",
      "bridgedName": "removeAllPoints",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "closePath": {
      "name": "closePath",
      "bridgedName": "closePath",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "curveToPoint:controlPoint1:controlPoint2:": {
      "name": "curveToPoint:controlPoint1:controlPoint2:",
      "bridgedName": "curveToPoint_controlPoint1_controlPoint2",
      "args": [
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "lineToPoint:": {
      "name": "lineToPoint:",
      "bridgedName": "lineToPoint",
      "args": [
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "moveToPoint:": {
      "name": "moveToPoint:",
      "bridgedName": "moveToPoint",
      "args": [
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "copyWithZone:": {
      "name": "copyWithZone:",
      "bridgedName": "copyWithZone",
      "args": [
        {
          "type": "struct _NSZone *"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "dealloc": {
      "name": "dealloc",
      "bridgedName": "dealloc",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "init": {
      "name": "init",
      "bridgedName": "init",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_deviceClosePath": {
      "name": "_deviceClosePath",
      "bridgedName": "_deviceClosePath",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_deviceCurveToPoint:controlPoint1:controlPoint2:": {
      "name": "_deviceCurveToPoint:controlPoint1:controlPoint2:",
      "bridgedName": "_deviceCurveToPoint_controlPoint1_controlPoint2",
      "args": [
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_deviceLineToPoint:": {
      "name": "_deviceLineToPoint:",
      "bridgedName": "_deviceLineToPoint",
      "args": [
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_deviceMoveToPoint:": {
      "name": "_deviceMoveToPoint:",
      "bridgedName": "_deviceMoveToPoint",
      "args": [
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_addPathSegment:point:": {
      "name": "_addPathSegment:point:",
      "bridgedName": "_addPathSegment_point",
      "args": [
        {
          "type": "long long"
        },
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "description": {
      "name": "description",
      "bridgedName": "description",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "appendBezierPathWithPackedGlyphs:": {
      "name": "appendBezierPathWithPackedGlyphs:",
      "bridgedName": "appendBezierPathWithPackedGlyphs",
      "args": [
        {
          "type": "const char *"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "appendBezierPathWithGlyphs:count:inFont:": {
      "name": "appendBezierPathWithGlyphs:count:inFont:",
      "bridgedName": "appendBezierPathWithGlyphs_count_inFont",
      "args": [
        {
          "type": "unsigned int *"
        },
        {
          "type": "long long"
        },
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "appendBezierPathWithGlyph:inFont:": {
      "name": "appendBezierPathWithGlyph:inFont:",
      "bridgedName": "appendBezierPathWithGlyph_inFont",
      "args": [
        {
          "type": "unsigned int"
        },
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "setCachesBezierPath:": {
      "name": "setCachesBezierPath:",
      "bridgedName": "setCachesBezierPath",
      "args": [
        {
          "type": "BOOL"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "cachesBezierPath": {
      "name": "cachesBezierPath",
      "bridgedName": "cachesBezierPath",
      "args": [],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "appendBezierPathWithRoundedRect:xRadius:yRadius:roundedTopLeftCorner:roundedTopRightCorner:roundedBottomLeftCorner:roundedBottomRightCorner:": {
      "name": "appendBezierPathWithRoundedRect:xRadius:yRadius:roundedTopLeftCorner:roundedTopRightCorner:roundedBottomLeftCorner:roundedBottomRightCorner:",
      "bridgedName": "appendBezierPathWithRoundedRect_xRadius_yRadius_roundedTopLeftCorner_roundedTopRightCorner_roundedBottomLeftCorner_roundedBottomRightCorner",
      "args": [
        {
          "type": "struct CGRect"
        },
        {
          "type": "double"
        },
        {
          "type": "double"
        },
        {
          "type": "BOOL"
        },
        {
          "type": "BOOL"
        },
        {
          "type": "BOOL"
        },
        {
          "type": "BOOL"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_appendBezierPathWithRoundRect:cornerRadius:": {
      "name": "_appendBezierPathWithRoundRect:cornerRadius:",
      "bridgedName": "_appendBezierPathWithRoundRect_cornerRadius",
      "args": [
        {
          "type": "struct CGRect"
        },
        {
          "type": "double"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_appendBezierPathWithBottomRoundRect:cornerRadius:": {
      "name": "_appendBezierPathWithBottomRoundRect:cornerRadius:",
      "bridgedName": "_appendBezierPathWithBottomRoundRect_cornerRadius",
      "args": [
        {
          "type": "struct CGRect"
        },
        {
          "type": "double"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_appendBezierPathWithTopRoundRect:cornerRadius:": {
      "name": "_appendBezierPathWithTopRoundRect:cornerRadius:",
      "bridgedName": "_appendBezierPathWithTopRoundRect_cornerRadius",
      "args": [
        {
          "type": "struct CGRect"
        },
        {
          "type": "double"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    }
  },
  "properties": {
    "elementCount": {
      "name": "elementCount",
      "pointer": false,
      "type": "long long",
      "attributes": [
        "readonly"
      ]
    },
    "bounds": {
      "name": "bounds",
      "pointer": false,
      "type": "struct CGRect",
      "attributes": [
        "readonly"
      ]
    },
    "controlPointBounds": {
      "name": "controlPointBounds",
      "pointer": false,
      "type": "struct CGRect",
      "attributes": [
        "readonly"
      ]
    },
    "currentPoint": {
      "name": "currentPoint",
      "pointer": false,
      "type": "struct CGPoint",
      "attributes": [
        "readonly"
      ]
    },
    "empty": {
      "name": "empty",
      "pointer": false,
      "type": "BOOL",
      "attributes": [
        "readonly",
        "getter=isEmpty"
      ]
    },
    "bezierPathByReversingPath": {
      "name": "bezierPathByReversingPath",
      "pointer": true,
      "type": "NSBezierPath",
      "attributes": [
        "readonly",
        "copy"
      ]
    },
    "bezierPathByFlatteningPath": {
      "name": "bezierPathByFlatteningPath",
      "pointer": true,
      "type": "NSBezierPath",
      "attributes": [
        "readonly",
        "copy"
      ]
    }
  }
}