{
  "imports": [
    "NSObject.h",
    "NSCoding.h"
  ],
  "classes": [
    "NSScrubber"
  ],
  "protocol": false,
  "className": "NSScrubberLayout",
  "extends": "NSObject",
  "interfaces": [
    "NSCoding"
  ],
  "methods": {
    "layoutAttributesClass": {
      "name": "layoutAttributesClass",
      "bridgedName": "layoutAttributesClass",
      "args": [],
      "returns": "Class",
      "kind": "class",
      "kindIndicator": "+"
    },
    ".cxx_destruct": {
      "name": ".cxx_destruct",
      "bridgedName": ".cxx_destruct",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "numberOfItems": {
      "name": "numberOfItems",
      "bridgedName": "numberOfItems",
      "args": [],
      "returns": "long long",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "selectedItem": {
      "name": "selectedItem",
      "bridgedName": "selectedItem",
      "args": [],
      "returns": "long long",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "visibleContentSize": {
      "name": "visibleContentSize",
      "bridgedName": "visibleContentSize",
      "args": [],
      "returns": "struct CGSize",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "shouldInvalidateLayoutForChangeFromVisibleRect:toVisibleRect:": {
      "name": "shouldInvalidateLayoutForChangeFromVisibleRect:toVisibleRect:",
      "bridgedName": "shouldInvalidateLayoutForChangeFromVisibleRect_toVisibleRect",
      "args": [
        {
          "type": "struct CGRect"
        },
        {
          "type": "struct CGRect"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "layoutAttributesForItemsInRect:": {
      "name": "layoutAttributesForItemsInRect:",
      "bridgedName": "layoutAttributesForItemsInRect",
      "args": [
        {
          "type": "struct CGRect"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "layoutAttributesForItemAtIndex:": {
      "name": "layoutAttributesForItemAtIndex:",
      "bridgedName": "layoutAttributesForItemAtIndex",
      "args": [
        {
          "type": "long long"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "prepareLayout": {
      "name": "prepareLayout",
      "bridgedName": "prepareLayout",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_layoutAttributesForItemsInRect:withState:": {
      "name": "_layoutAttributesForItemsInRect:withState:",
      "bridgedName": "_layoutAttributesForItemsInRect_withState",
      "args": [
        {
          "type": "struct CGRect"
        },
        {
          "type": "CDStruct_99688279"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_layoutAttributesForItemAtIndex:withState:": {
      "name": "_layoutAttributesForItemAtIndex:withState:",
      "bridgedName": "_layoutAttributesForItemAtIndex_withState",
      "args": [
        {
          "type": "long long"
        },
        {
          "type": "CDStruct_99688279"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_shouldMirrorForRTL": {
      "name": "_shouldMirrorForRTL",
      "bridgedName": "_shouldMirrorForRTL",
      "args": [],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_prepareLayoutIfNeeded": {
      "name": "_prepareLayoutIfNeeded",
      "bridgedName": "_prepareLayoutIfNeeded",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "invalidateLayout": {
      "name": "invalidateLayout",
      "bridgedName": "invalidateLayout",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "_setScrubber:": {
      "name": "_setScrubber:",
      "bridgedName": "_setScrubber",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "dealloc": {
      "name": "dealloc",
      "bridgedName": "dealloc",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "encodeWithCoder:": {
      "name": "encodeWithCoder:",
      "bridgedName": "encodeWithCoder",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "initWithCoder:": {
      "name": "initWithCoder:",
      "bridgedName": "initWithCoder",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "init": {
      "name": "init",
      "bridgedName": "init",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    }
  },
  "properties": {
    "automaticallyMirrorsInRightToLeftLayout": {
      "name": "automaticallyMirrorsInRightToLeftLayout",
      "pointer": false,
      "type": "BOOL",
      "attributes": [
        "readonly"
      ]
    },
    "shouldInvalidateLayoutForHighlightChange": {
      "name": "shouldInvalidateLayoutForHighlightChange",
      "pointer": false,
      "type": "BOOL",
      "attributes": [
        "readonly"
      ]
    },
    "shouldInvalidateLayoutForSelectionChange": {
      "name": "shouldInvalidateLayoutForSelectionChange",
      "pointer": false,
      "type": "BOOL",
      "attributes": [
        "readonly"
      ]
    },
    "scrubberContentSize": {
      "name": "scrubberContentSize",
      "pointer": false,
      "type": "struct CGSize",
      "attributes": [
        "readonly"
      ]
    },
    "visibleRect": {
      "name": "visibleRect",
      "pointer": false,
      "type": "struct CGRect",
      "attributes": [
        "readonly"
      ]
    },
    "scrubber": {
      "name": "scrubber",
      "pointer": true,
      "type": "__weak NSScrubber",
      "attributes": [
        "readonly"
      ]
    }
  }
}