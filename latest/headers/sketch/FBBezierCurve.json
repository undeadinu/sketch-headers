{
  "imports": [
    "NSObject.h"
  ],
  "classes": [
    "FBBezierContour",
    "FBEdgeCrossing",
    "NSArray",
    "NSMutableArray"
  ],
  "protocol": false,
  "className": "FBBezierCurve",
  "extends": "NSObject",
  "interfaces": [],
  "methods": {
    "bezierCurveWithBezierCurveData:": {
      "name": "bezierCurveWithBezierCurveData:",
      "bridgedName": "bezierCurveWithBezierCurveData",
      "args": [
        {
          "type": "struct FBBezierCurveData"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "bezierCurveWithEndPoint1:controlPoint1:controlPoint2:endPoint2:": {
      "name": "bezierCurveWithEndPoint1:controlPoint1:controlPoint2:endPoint2:",
      "bridgedName": "bezierCurveWithEndPoint1_controlPoint1_controlPoint2_endPoint2",
      "args": [
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "bezierCurveWithLineStartPoint:endPoint:": {
      "name": "bezierCurveWithLineStartPoint:endPoint:",
      "bridgedName": "bezierCurveWithLineStartPoint_endPoint",
      "args": [
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "bezierCurvesFromBezierPath:": {
      "name": "bezierCurvesFromBezierPath:",
      "bridgedName": "bezierCurvesFromBezierPath",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    ".cxx_destruct": {
      "name": ".cxx_destruct",
      "bridgedName": ".cxx_destruct",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "debugQuickLookObject": {
      "name": "debugQuickLookObject",
      "bridgedName": "debugQuickLookObject",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "debugDrawColor:controlPointColor:scale:": {
      "name": "debugDrawColor:controlPointColor:scale:",
      "bridgedName": "debugDrawColor_controlPointColor_scale",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id"
        },
        {
          "type": "double"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "sortCrossings": {
      "name": "sortCrossings",
      "bridgedName": "sortCrossings",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "isNext:": {
      "name": "isNext:",
      "bridgedName": "isNext",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "crossesEdge:atIntersectRange:": {
      "name": "crossesEdge:atIntersectRange:",
      "bridgedName": "crossesEdge_atIntersectRange",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "crossesEdge:atIntersection:": {
      "name": "crossesEdge:atIntersection:",
      "bridgedName": "crossesEdge_atIntersection",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "hasCrossingsUsingNonself:": {
      "name": "hasCrossingsUsingNonself:",
      "bridgedName": "hasCrossingsUsingNonself",
      "args": [
        {
          "type": "BOOL"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "lastCrossingUsingNonself:": {
      "name": "lastCrossingUsingNonself:",
      "bridgedName": "lastCrossingUsingNonself",
      "args": [
        {
          "type": "BOOL"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "firstCrossingUsingNonself:": {
      "name": "firstCrossingUsingNonself:",
      "bridgedName": "firstCrossingUsingNonself",
      "args": [
        {
          "type": "BOOL"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "selfIntersectingEdgesWithBlock:": {
      "name": "selfIntersectingEdgesWithBlock:",
      "bridgedName": "selfIntersectingEdgesWithBlock",
      "args": [
        {
          "type": "CDUnknownBlockType"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "intersectingEdgesWithBlock:": {
      "name": "intersectingEdgesWithBlock:",
      "bridgedName": "intersectingEdgesWithBlock",
      "args": [
        {
          "type": "CDUnknownBlockType"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "previousCrossing:": {
      "name": "previousCrossing:",
      "bridgedName": "previousCrossing",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "nextCrossing:": {
      "name": "nextCrossing:",
      "bridgedName": "nextCrossing",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "crossingsCopyWithBlock:": {
      "name": "crossingsCopyWithBlock:",
      "bridgedName": "crossingsCopyWithBlock",
      "args": [
        {
          "type": "CDUnknownBlockType"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "crossingsWithBlock:": {
      "name": "crossingsWithBlock:",
      "bridgedName": "crossingsWithBlock",
      "args": [
        {
          "type": "CDUnknownBlockType"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "removeCrossingsInNonCrossingOverlapRuns": {
      "name": "removeCrossingsInNonCrossingOverlapRuns",
      "bridgedName": "removeCrossingsInNonCrossingOverlapRuns",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "reorderCoincidentCrossingA:crossingB:": {
      "name": "reorderCoincidentCrossingA:crossingB:",
      "bridgedName": "reorderCoincidentCrossingA_crossingB",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "removeDuplicateCrossings": {
      "name": "removeDuplicateCrossings",
      "bridgedName": "removeDuplicateCrossings",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "removeAllCrossings": {
      "name": "removeAllCrossings",
      "bridgedName": "removeAllCrossings",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "removeCrossing:": {
      "name": "removeCrossing:",
      "bridgedName": "removeCrossing",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "addCrossing:": {
      "name": "addCrossing:",
      "bridgedName": "addCrossing",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "description": {
      "name": "description",
      "bridgedName": "description",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "clone": {
      "name": "clone",
      "bridgedName": "clone",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "bezierPath": {
      "name": "bezierPath",
      "bridgedName": "bezierPath",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "tangentAtParameter:": {
      "name": "tangentAtParameter:",
      "bridgedName": "tangentAtParameter",
      "args": [
        {
          "type": "double"
        }
      ],
      "returns": "struct CGPoint",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "tangentFromLeftOffset:": {
      "name": "tangentFromLeftOffset:",
      "bridgedName": "tangentFromLeftOffset",
      "args": [
        {
          "type": "double"
        }
      ],
      "returns": "struct CGPoint",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "tangentFromRightOffset:": {
      "name": "tangentFromRightOffset:",
      "bridgedName": "tangentFromRightOffset",
      "args": [
        {
          "type": "double"
        }
      ],
      "returns": "struct CGPoint",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "pointFromLeftOffset:": {
      "name": "pointFromLeftOffset:",
      "bridgedName": "pointFromLeftOffset",
      "args": [
        {
          "type": "double"
        }
      ],
      "returns": "struct CGPoint",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "pointFromRightOffset:": {
      "name": "pointFromRightOffset:",
      "bridgedName": "pointFromRightOffset",
      "args": [
        {
          "type": "double"
        }
      ],
      "returns": "struct CGPoint",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "closestLocationToPoint:": {
      "name": "closestLocationToPoint:",
      "bridgedName": "closestLocationToPoint",
      "args": [
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "struct FBBezierCurveLocation",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "lengthAtParameter:": {
      "name": "lengthAtParameter:",
      "bridgedName": "lengthAtParameter",
      "args": [
        {
          "type": "double"
        }
      ],
      "returns": "double",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "length": {
      "name": "length",
      "bridgedName": "length",
      "args": [],
      "returns": "double",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "refineParameter:forPoint:": {
      "name": "refineParameter:forPoint:",
      "bridgedName": "refineParameter_forPoint",
      "args": [
        {
          "type": "double"
        },
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "double",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "pointAtParameter:leftBezierCurve:rightBezierCurve:": {
      "name": "pointAtParameter:leftBezierCurve:rightBezierCurve:",
      "bridgedName": "pointAtParameter_leftBezierCurve_rightBezierCurve",
      "args": [
        {
          "type": "double"
        },
        {
          "type": "id *"
        },
        {
          "type": "id *"
        }
      ],
      "returns": "struct CGPoint",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "curveWithTransform:": {
      "name": "curveWithTransform:",
      "bridgedName": "curveWithTransform",
      "args": [
        {
          "type": "struct CGAffineTransform"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "reversedCurve": {
      "name": "reversedCurve",
      "bridgedName": "reversedCurve",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "splitSubcurvesWithRange:left:middle:right:": {
      "name": "splitSubcurvesWithRange:left:middle:right:",
      "bridgedName": "splitSubcurvesWithRange_left_middle_right",
      "args": [
        {
          "type": "struct FBRange"
        },
        {
          "type": "id *"
        },
        {
          "type": "id *"
        },
        {
          "type": "id *"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "subcurveWithRange:": {
      "name": "subcurveWithRange:",
      "bridgedName": "subcurveWithRange",
      "args": [
        {
          "type": "struct FBRange"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "intersectionsWithBezierCurve:overlapRange:withBlock:": {
      "name": "intersectionsWithBezierCurve:overlapRange:withBlock:",
      "bridgedName": "intersectionsWithBezierCurve_overlapRange_withBlock",
      "args": [
        {
          "type": "id"
        },
        {
          "type": "id *"
        },
        {
          "type": "CDUnknownBlockType"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "doesHaveIntersectionsWithBezierCurve:": {
      "name": "doesHaveIntersectionsWithBezierCurve:",
      "bridgedName": "doesHaveIntersectionsWithBezierCurve",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "mightIntersectWith:": {
      "name": "mightIntersectWith:",
      "bridgedName": "mightIntersectWith",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "checkForLine": {
      "name": "checkForLine",
      "bridgedName": "checkForLine",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "isEqual:": {
      "name": "isEqual:",
      "bridgedName": "isEqual",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "initWithLineStartPoint:endPoint:contour:": {
      "name": "initWithLineStartPoint:endPoint:contour:",
      "bridgedName": "initWithLineStartPoint_endPoint_contour",
      "args": [
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        },
        {
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "initWithEndPoint1:controlPoint1:controlPoint2:endPoint2:contour:": {
      "name": "initWithEndPoint1:controlPoint1:controlPoint2:endPoint2:contour:",
      "bridgedName": "initWithEndPoint1_controlPoint1_controlPoint2_endPoint2_contour",
      "args": [
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        },
        {
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "initWithBezierCurveData:": {
      "name": "initWithBezierCurveData:",
      "bridgedName": "initWithBezierCurveData",
      "args": [
        {
          "type": "struct FBBezierCurveData"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    }
  },
  "properties": {
    "data": {
      "name": "data",
      "pointer": false,
      "type": "struct FBBezierCurveData",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "startShared": {
      "name": "startShared",
      "pointer": false,
      "type": "BOOL",
      "attributes": [
        "nonatomic",
        "getter=isStartShared"
      ]
    },
    "index": {
      "name": "index",
      "pointer": false,
      "type": "unsigned long long",
      "attributes": [
        "nonatomic"
      ]
    },
    "contour": {
      "name": "contour",
      "pointer": true,
      "type": "__weak FBBezierContour",
      "attributes": [
        "nonatomic"
      ]
    },
    "lastCrossing": {
      "name": "lastCrossing",
      "pointer": true,
      "type": "FBEdgeCrossing",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "firstCrossing": {
      "name": "firstCrossing",
      "pointer": true,
      "type": "FBEdgeCrossing",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "crossings": {
      "name": "crossings",
      "pointer": true,
      "type": "NSArray",
      "attributes": [
        "readonly",
        "copy",
        "nonatomic"
      ]
    },
    "hasCrossings": {
      "name": "hasCrossings",
      "pointer": false,
      "type": "BOOL",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "previousNonpointNonHorizontalLine": {
      "name": "previousNonpointNonHorizontalLine",
      "pointer": true,
      "type": "FBBezierCurve",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "nextNonpointNonHorizontalLine": {
      "name": "nextNonpointNonHorizontalLine",
      "pointer": true,
      "type": "FBBezierCurve",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "previousNonpoint": {
      "name": "previousNonpoint",
      "pointer": true,
      "type": "FBBezierCurve",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "nextNonpoint": {
      "name": "nextNonpoint",
      "pointer": true,
      "type": "FBBezierCurve",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "previous": {
      "name": "previous",
      "pointer": true,
      "type": "FBBezierCurve",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "next": {
      "name": "next",
      "pointer": true,
      "type": "FBBezierCurve",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "crossings_": {
      "name": "crossings_",
      "pointer": true,
      "type": "NSMutableArray",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "boundingRect": {
      "name": "boundingRect",
      "pointer": false,
      "type": "struct CGRect",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "bounds": {
      "name": "bounds",
      "pointer": false,
      "type": "struct CGRect",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "isPointOrHorizontalLine": {
      "name": "isPointOrHorizontalLine",
      "pointer": false,
      "type": "BOOL",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "isHorizontalLine": {
      "name": "isHorizontalLine",
      "pointer": false,
      "type": "BOOL",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "looksLikeLine": {
      "name": "looksLikeLine",
      "pointer": false,
      "type": "BOOL",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "isEndHorizontal": {
      "name": "isEndHorizontal",
      "pointer": false,
      "type": "BOOL",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "isStartHorizontal": {
      "name": "isStartHorizontal",
      "pointer": false,
      "type": "BOOL",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "point": {
      "name": "point",
      "pointer": false,
      "type": "BOOL",
      "attributes": [
        "readonly",
        "nonatomic",
        "getter=isPoint"
      ]
    },
    "isStraightLine": {
      "name": "isStraightLine",
      "pointer": false,
      "type": "BOOL",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "endPoint2": {
      "name": "endPoint2",
      "pointer": false,
      "type": "struct CGPoint",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "controlPoint2": {
      "name": "controlPoint2",
      "pointer": false,
      "type": "struct CGPoint",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "controlPoint1": {
      "name": "controlPoint1",
      "pointer": false,
      "type": "struct CGPoint",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "endPoint1": {
      "name": "endPoint1",
      "pointer": false,
      "type": "struct CGPoint",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    }
  }
}