{
  "imports": [
    "NSObject.h"
  ],
  "classes": [
    "NSSet"
  ],
  "protocol": false,
  "className": "MSBezierSegment",
  "extends": "NSObject",
  "interfaces": [],
  "methods": {
    "cubicSegmentWithEndPoint1:endPoint2:controlPoint1:controlPoint2:": {
      "name": "cubicSegmentWithEndPoint1:endPoint2:controlPoint1:controlPoint2:",
      "bridgedName": "cubicSegmentWithEndPoint1_endPoint2_controlPoint1_controlPoint2",
      "args": [
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "quadraticSegmentWithEndPoint1:endPoint2:controlPoint:": {
      "name": "quadraticSegmentWithEndPoint1:endPoint2:controlPoint:",
      "bridgedName": "quadraticSegmentWithEndPoint1_endPoint2_controlPoint",
      "args": [
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    "lineSegmentWithEndPoint1:endPoint2:": {
      "name": "lineSegmentWithEndPoint1:endPoint2:",
      "bridgedName": "lineSegmentWithEndPoint1_endPoint2",
      "args": [
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "id",
      "kind": "class",
      "kindIndicator": "+"
    },
    ".cxx_destruct": {
      "name": ".cxx_destruct",
      "bridgedName": ".cxx_destruct",
      "args": [],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "debugQuickLookObject": {
      "name": "debugQuickLookObject",
      "bridgedName": "debugQuickLookObject",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "description": {
      "name": "description",
      "bridgedName": "description",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "repr": {
      "name": "repr",
      "bridgedName": "repr",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "bezierPath": {
      "name": "bezierPath",
      "bridgedName": "bezierPath",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "isEqualToBezierSegment:": {
      "name": "isEqualToBezierSegment:",
      "bridgedName": "isEqualToBezierSegment",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "BOOL",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "bounds": {
      "name": "bounds",
      "bridgedName": "bounds",
      "args": [],
      "returns": "struct CGRect",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "reversedSegment": {
      "name": "reversedSegment",
      "bridgedName": "reversedSegment",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "representationUsingType:": {
      "name": "representationUsingType:",
      "bridgedName": "representationUsingType",
      "args": [
        {
          "type": "unsigned long long"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "cubicRepresentation": {
      "name": "cubicRepresentation",
      "bridgedName": "cubicRepresentation",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "quadraticRepresentation": {
      "name": "quadraticRepresentation",
      "bridgedName": "quadraticRepresentation",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "lineRepresentation": {
      "name": "lineRepresentation",
      "bridgedName": "lineRepresentation",
      "args": [],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "segmentWithInset:": {
      "name": "segmentWithInset:",
      "bridgedName": "segmentWithInset",
      "args": [
        {
          "type": "double"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "segmentWithTransform:": {
      "name": "segmentWithTransform:",
      "bridgedName": "segmentWithTransform",
      "args": [
        {
          "type": "struct CGAffineTransform"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "segmentFromOffset:": {
      "name": "segmentFromOffset:",
      "bridgedName": "segmentFromOffset",
      "args": [
        {
          "type": "double"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "segmentToOffset:": {
      "name": "segmentToOffset:",
      "bridgedName": "segmentToOffset",
      "args": [
        {
          "type": "double"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "intersectionsWithSegment:": {
      "name": "intersectionsWithSegment:",
      "bridgedName": "intersectionsWithSegment",
      "args": [
        {
          "type": "id"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "offsetsOfIntersectionsWithTangent:": {
      "name": "offsetsOfIntersectionsWithTangent:",
      "bridgedName": "offsetsOfIntersectionsWithTangent",
      "args": [
        {
          "type": "struct MSTangent"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "offsetForNormalToPoint:": {
      "name": "offsetForNormalToPoint:",
      "bridgedName": "offsetForNormalToPoint",
      "args": [
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "double",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "curvatureAtOffset:": {
      "name": "curvatureAtOffset:",
      "bridgedName": "curvatureAtOffset",
      "args": [
        {
          "type": "double"
        }
      ],
      "returns": "double",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "curvatureAtEndPoint2": {
      "name": "curvatureAtEndPoint2",
      "bridgedName": "curvatureAtEndPoint2",
      "args": [],
      "returns": "double",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "curvatureAtEndPoint1": {
      "name": "curvatureAtEndPoint1",
      "bridgedName": "curvatureAtEndPoint1",
      "args": [],
      "returns": "double",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "curvatureFromPoint1:point2:point3:": {
      "name": "curvatureFromPoint1:point2:point3:",
      "bridgedName": "curvatureFromPoint1_point2_point3",
      "args": [
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "double",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "pointAtOffset:": {
      "name": "pointAtOffset:",
      "bridgedName": "pointAtOffset",
      "args": [
        {
          "type": "double"
        }
      ],
      "returns": "struct CGPoint",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "tangentAtOffset:": {
      "name": "tangentAtOffset:",
      "bridgedName": "tangentAtOffset",
      "args": [
        {
          "type": "double"
        }
      ],
      "returns": "struct MSTangent",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "tanget:andPoint:atOffset:": {
      "name": "tanget:andPoint:atOffset:",
      "bridgedName": "tanget_andPoint_atOffset",
      "args": [
        {
          "type": "struct MSTangent *"
        },
        {
          "type": "struct CGPoint *"
        },
        {
          "type": "double"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "quadraticDeCasteljauAt:points:": {
      "name": "quadraticDeCasteljauAt:points:",
      "bridgedName": "quadraticDeCasteljauAt_points",
      "args": [
        {
          "type": "double"
        },
        {
          "type": "struct CGPoint *"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "cubicDeCasteljauAt:points:": {
      "name": "cubicDeCasteljauAt:points:",
      "bridgedName": "cubicDeCasteljauAt_points",
      "args": [
        {
          "type": "double"
        },
        {
          "type": "struct CGPoint *"
        }
      ],
      "returns": "void",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "arcLengthWithSegments:": {
      "name": "arcLengthWithSegments:",
      "bridgedName": "arcLengthWithSegments",
      "args": [
        {
          "type": "unsigned long long"
        }
      ],
      "returns": "double",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "segmentMirroredAtOffset:": {
      "name": "segmentMirroredAtOffset:",
      "bridgedName": "segmentMirroredAtOffset",
      "args": [
        {
          "type": "double"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "segmentWithEndPoint2:": {
      "name": "segmentWithEndPoint2:",
      "bridgedName": "segmentWithEndPoint2",
      "args": [
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "segmentWithEndPoint1:": {
      "name": "segmentWithEndPoint1:",
      "bridgedName": "segmentWithEndPoint1",
      "args": [
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "initWithEndPoint1:endPoint2:controlPoint1:controlPoint2:": {
      "name": "initWithEndPoint1:endPoint2:controlPoint1:controlPoint2:",
      "bridgedName": "initWithEndPoint1_endPoint2_controlPoint1_controlPoint2",
      "args": [
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "initWithEndPoint1:endPoint2:controlPoint:": {
      "name": "initWithEndPoint1:endPoint2:controlPoint:",
      "bridgedName": "initWithEndPoint1_endPoint2_controlPoint",
      "args": [
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "initWithEndPoint1:endPoint2:": {
      "name": "initWithEndPoint1:endPoint2:",
      "bridgedName": "initWithEndPoint1_endPoint2",
      "args": [
        {
          "type": "struct CGPoint"
        },
        {
          "type": "struct CGPoint"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    },
    "segmentBySmoothingEndPoints:decay:": {
      "name": "segmentBySmoothingEndPoints:decay:",
      "bridgedName": "segmentBySmoothingEndPoints_decay",
      "args": [
        {
          "type": "double"
        },
        {
          "type": "double"
        }
      ],
      "returns": "id",
      "kind": "instance",
      "kindIndicator": "-"
    }
  },
  "properties": {
    "derivative": {
      "name": "derivative",
      "pointer": true,
      "type": "MSBezierSegment",
      "attributes": [
        "retain",
        "nonatomic"
      ]
    },
    "inflectionOffsets": {
      "name": "inflectionOffsets",
      "pointer": true,
      "type": "NSSet",
      "attributes": [
        "retain",
        "nonatomic"
      ]
    },
    "yAxisRoots": {
      "name": "yAxisRoots",
      "pointer": true,
      "type": "NSSet",
      "attributes": [
        "retain",
        "nonatomic"
      ]
    },
    "xAxisRoots": {
      "name": "xAxisRoots",
      "pointer": true,
      "type": "NSSet",
      "attributes": [
        "retain",
        "nonatomic"
      ]
    },
    "controlPoint2": {
      "name": "controlPoint2",
      "pointer": false,
      "type": "struct CGPoint",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "controlPoint1": {
      "name": "controlPoint1",
      "pointer": false,
      "type": "struct CGPoint",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "endPoint2": {
      "name": "endPoint2",
      "pointer": false,
      "type": "struct CGPoint",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "endPoint1": {
      "name": "endPoint1",
      "pointer": false,
      "type": "struct CGPoint",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "segmentType": {
      "name": "segmentType",
      "pointer": false,
      "type": "unsigned long long",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "curviness": {
      "name": "curviness",
      "pointer": false,
      "type": "double",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "transformForXAxisAlignment": {
      "name": "transformForXAxisAlignment",
      "pointer": false,
      "type": "struct CGAffineTransform",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "isAPoint": {
      "name": "isAPoint",
      "pointer": false,
      "type": "BOOL",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "looksLikeALine": {
      "name": "looksLikeALine",
      "pointer": false,
      "type": "BOOL",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "arcLength": {
      "name": "arcLength",
      "pointer": false,
      "type": "double",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    },
    "lineLength": {
      "name": "lineLength",
      "pointer": false,
      "type": "double",
      "attributes": [
        "readonly",
        "nonatomic"
      ]
    }
  }
}